// Copyright (c) 2020 SafetyCulture Pty Ltd. All Rights Reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: s12/protobuf/proto/validator.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SymbolCategory defines which special characters (Unicode symbols and the like) are allowed
// See validation_definitions.go for full details
type SymbolCategory int32

const (
	// Sm - any mathematical symbol, e.g. + < > = | ~ ùõÅ https://www.fileformat.info/info/unicode/category/Sm/list.htm
	// Punctuation, other
	// Only allowed for string with replace_unsafe option
	SymbolCategory_PUNCTUATION SymbolCategory = 1
	// Sc - any currency sign, e.g. $ ¬£ ¬• ‚Ç¨
	// https://www.fileformat.info/info/unicode/category/Sc/list.htm
	SymbolCategory_CURRENCY SymbolCategory = 2
	// Sk - a combining character (mark) as a full character on its own, e.g. ^ ` ¬Ø
	// Only allowed for string with replace_unsafe option
	// https://www.fileformat.info/info/unicode/category/Sk/list.htm
	SymbolCategory_MODIFIER SymbolCategory = 3
	// So - various symbols not in the categories above, e.g. ¬© ‚Üñ üåè üíØ
	// https://www.fileformat.info/info/unicode/category/So/list.htm
	SymbolCategory_OTHER SymbolCategory = 4
	// Mark - characters intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.)
	// all categories (Mn, Mc, ...)
	SymbolCategory_MARK SymbolCategory = 5
	// Common symbols only
	// SC defined list of common symbols we need
	// See validation_definitinos.go for the current chars
	SymbolCategory_COMMON SymbolCategory = 6
)

// Enum value maps for SymbolCategory.
var (
	SymbolCategory_name = map[int32]string{
		1: "PUNCTUATION",
		2: "CURRENCY",
		3: "MODIFIER",
		4: "OTHER",
		5: "MARK",
		6: "COMMON",
	}
	SymbolCategory_value = map[string]int32{
		"PUNCTUATION": 1,
		"CURRENCY":    2,
		"MODIFIER":    3,
		"OTHER":       4,
		"MARK":        5,
		"COMMON":      6,
	}
)

func (x SymbolCategory) Enum() *SymbolCategory {
	p := new(SymbolCategory)
	*p = x
	return p
}

func (x SymbolCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_s12_protobuf_proto_validator_proto_enumTypes[0].Descriptor()
}

func (SymbolCategory) Type() protoreflect.EnumType {
	return &file_s12_protobuf_proto_validator_proto_enumTypes[0]
}

func (x SymbolCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SymbolCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SymbolCategory(num)
	return nil
}

// Deprecated: Use SymbolCategory.Descriptor instead.
func (SymbolCategory) EnumDescriptor() ([]byte, []int) {
	return file_s12_protobuf_proto_validator_proto_rawDescGZIP(), []int{0}
}

// StringRules describe the constraints applied to `string` values (for both string and unsafe_string)
type StringRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set this as optional field (not required)
	// default = false
	Optional *bool `protobuf:"varint,1,opt,name=optional,def=0" json:"optional,omitempty"`
	// Trim whitespace before validation - WARNING: this will mutate the data permanently
	// Any leading and trailing whitespace will be removed (this can't be undone)
	// default = false
	Trim *bool `protobuf:"varint,2,opt,name=trim,def=0" json:"trim,omitempty"`
	// Length (range), eg "5:100" must be 1 minimum (0:50 is invalid, if 0 accepted, should set optional)
	// Can be set to a single value for fixed length strings, eg "16"
	// default = 1:130
	Len *string `protobuf:"bytes,3,opt,name=len" json:"len,omitempty"`
	// Validate the length in rune length (number of Unicode codepoints) instead of bytes
	Runes *bool `protobuf:"varint,4,opt,name=runes,def=0" json:"runes,omitempty"`
	// Replace common unsafe characters with an alternative representation
	// Will replace some potentially unsafe characters like ' with a compatible, safe equivalent
	// WARNING: this will permanently mutate the data (this can be undone by reversing the replace logic)
	// NOTE: this is NOT a suitable replacement for output encoding and the use of safe APIs
	ReplaceUnsafe *bool `protobuf:"varint,5,opt,name=replace_unsafe,json=replaceUnsafe,def=0" json:"replace_unsafe,omitempty"`
	// Replace other symbols with more common alternatives
	ReplaceOther *bool `protobuf:"varint,6,opt,name=replace_other,json=replaceOther,def=0" json:"replace_other,omitempty"`
	// Allow default + additional whitelist of defined characters, eg ",/*"
	// Can change this to repeated string if that is better readable, eg. [",", "/", "*"] but that's annoying to type
	// default = predefined safe_string_regex for string or unsafe_string_regex for unsafe_string
	Allow *string `protobuf:"bytes,7,opt,name=allow" json:"allow,omitempty"`
	// Allow symbol categories
	// default = no symbols except for default characters in string_regex or unsafe_string_regex
	Symbols []SymbolCategory `protobuf:"varint,8,rep,name=symbols,enum=validator.SymbolCategory" json:"symbols,omitempty"`
	// Allow newline characters (can also be defined via allow = "\n\r")
	// NOTE: \r will be stripped if this option is used
	// default = false (no newline characters allowed)
	Multiline *bool `protobuf:"varint,9,opt,name=multiline" json:"multiline,omitempty"`
	// Check for invalid encoding
	// default = true (will reject the input if invalid encoding is detected)
	ValidateEncoding *bool `protobuf:"varint,10,opt,name=validate_encoding,json=validateEncoding,def=1" json:"validate_encoding,omitempty"`
	// Sanitise (remove) Private Use Area Codepoints in the Basic Multilingual Plane
	SanitisePua *bool `protobuf:"varint,11,opt,name=sanitise_pua,json=sanitisePua,def=0" json:"sanitise_pua,omitempty"`
}

// Default values for StringRules fields.
const (
	Default_StringRules_Optional         = bool(false)
	Default_StringRules_Trim             = bool(false)
	Default_StringRules_Runes            = bool(false)
	Default_StringRules_ReplaceUnsafe    = bool(false)
	Default_StringRules_ReplaceOther     = bool(false)
	Default_StringRules_ValidateEncoding = bool(true)
	Default_StringRules_SanitisePua      = bool(false)
)

func (x *StringRules) Reset() {
	*x = StringRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s12_protobuf_proto_validator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_s12_protobuf_proto_validator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRules.ProtoReflect.Descriptor instead.
func (*StringRules) Descriptor() ([]byte, []int) {
	return file_s12_protobuf_proto_validator_proto_rawDescGZIP(), []int{0}
}

func (x *StringRules) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return Default_StringRules_Optional
}

func (x *StringRules) GetTrim() bool {
	if x != nil && x.Trim != nil {
		return *x.Trim
	}
	return Default_StringRules_Trim
}

func (x *StringRules) GetLen() string {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return ""
}

func (x *StringRules) GetRunes() bool {
	if x != nil && x.Runes != nil {
		return *x.Runes
	}
	return Default_StringRules_Runes
}

func (x *StringRules) GetReplaceUnsafe() bool {
	if x != nil && x.ReplaceUnsafe != nil {
		return *x.ReplaceUnsafe
	}
	return Default_StringRules_ReplaceUnsafe
}

func (x *StringRules) GetReplaceOther() bool {
	if x != nil && x.ReplaceOther != nil {
		return *x.ReplaceOther
	}
	return Default_StringRules_ReplaceOther
}

func (x *StringRules) GetAllow() string {
	if x != nil && x.Allow != nil {
		return *x.Allow
	}
	return ""
}

func (x *StringRules) GetSymbols() []SymbolCategory {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *StringRules) GetMultiline() bool {
	if x != nil && x.Multiline != nil {
		return *x.Multiline
	}
	return false
}

func (x *StringRules) GetValidateEncoding() bool {
	if x != nil && x.ValidateEncoding != nil {
		return *x.ValidateEncoding
	}
	return Default_StringRules_ValidateEncoding
}

func (x *StringRules) GetSanitisePua() bool {
	if x != nil && x.SanitisePua != nil {
		return *x.SanitisePua
	}
	return Default_StringRules_SanitisePua
}

// EmailRules describe the constraints applied to `email` values
type EmailRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set this as optional field (not required)
	// default = false
	Optional *bool `protobuf:"varint,1,opt,name=optional,def=0" json:"optional,omitempty"`
}

// Default values for EmailRules fields.
const (
	Default_EmailRules_Optional = bool(false)
)

func (x *EmailRules) Reset() {
	*x = EmailRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s12_protobuf_proto_validator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailRules) ProtoMessage() {}

func (x *EmailRules) ProtoReflect() protoreflect.Message {
	mi := &file_s12_protobuf_proto_validator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailRules.ProtoReflect.Descriptor instead.
func (*EmailRules) Descriptor() ([]byte, []int) {
	return file_s12_protobuf_proto_validator_proto_rawDescGZIP(), []int{1}
}

func (x *EmailRules) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return Default_EmailRules_Optional
}

// IdRules describes the constraints applied to `Id` values such as UUIDv4 and legacy_id
type IdRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set this as optional field (not required)
	// default = false
	Optional *bool `protobuf:"varint,1,opt,name=optional,def=0" json:"optional,omitempty"`
	// The UUID version that is expected, v4 by default but allows us to upgrade if we need to later
	Version *string `protobuf:"bytes,2,opt,name=version,def=v4" json:"version,omitempty"`
	// Also allow legacy_id format, similar to validator.legacy_id
	// Normal UUID validation will be attempted first
	// If it fails it will fall back to IsLegacyID method
	// S12 id is not accepted, enable "s12id" option if you also need to accept S12 ids
	Legacy *bool `protobuf:"varint,3,opt,name=legacy,def=0" json:"legacy,omitempty"`
	// Also allow S12 id format, e.g. prefix_id
	// Similar to legacy id, will first attempt normal UUID validation, then s12id
	// Legacy id is not accepted, enable "legacy" option if you also need to accept legacy ids
	S12Id *bool `protobuf:"varint,4,opt,name=s12id,def=0" json:"s12id,omitempty"`
	// Only apply soft validation. Validation errors for this validator are logged, not returned.
	// Be aware that due to multiples validators applying, and order of precedence
	// this will not prevent errors from other validators being returned.
	SoftValidation *bool `protobuf:"varint,5,opt,name=soft_validation,json=softValidation,def=0" json:"soft_validation,omitempty"`
}

// Default values for IdRules fields.
const (
	Default_IdRules_Optional       = bool(false)
	Default_IdRules_Version        = string("v4")
	Default_IdRules_Legacy         = bool(false)
	Default_IdRules_S12Id          = bool(false)
	Default_IdRules_SoftValidation = bool(false)
)

func (x *IdRules) Reset() {
	*x = IdRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s12_protobuf_proto_validator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRules) ProtoMessage() {}

func (x *IdRules) ProtoReflect() protoreflect.Message {
	mi := &file_s12_protobuf_proto_validator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRules.ProtoReflect.Descriptor instead.
func (*IdRules) Descriptor() ([]byte, []int) {
	return file_s12_protobuf_proto_validator_proto_rawDescGZIP(), []int{2}
}

func (x *IdRules) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return Default_IdRules_Optional
}

func (x *IdRules) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_IdRules_Version
}

func (x *IdRules) GetLegacy() bool {
	if x != nil && x.Legacy != nil {
		return *x.Legacy
	}
	return Default_IdRules_Legacy
}

func (x *IdRules) GetS12Id() bool {
	if x != nil && x.S12Id != nil {
		return *x.S12Id
	}
	return Default_IdRules_S12Id
}

func (x *IdRules) GetSoftValidation() bool {
	if x != nil && x.SoftValidation != nil {
		return *x.SoftValidation
	}
	return Default_IdRules_SoftValidation
}

// URLRules describe the constraints applied to `url` values
type URLRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set this as optional field (not required)
	// default = false
	Optional *bool `protobuf:"varint,1,opt,name=optional,def=0" json:"optional,omitempty"`
	// Set valid schemes for the URL, e.g. ["http", "https"]
	// default = https only
	Schemes []string `protobuf:"bytes,2,rep,name=schemes" json:"schemes,omitempty"`
	// Allow fragments like #fragment in the URL
	// default = false
	AllowFragment *bool `protobuf:"varint,3,opt,name=allow_fragment,json=allowFragment,def=0" json:"allow_fragment,omitempty"`
	// Allow http in addition to https
	// Basically shortcut for schemes = ["https", "http"]
	// default = false
	AllowHttp *bool `protobuf:"varint,4,opt,name=allow_http,json=allowHttp,def=0" json:"allow_http,omitempty"`
}

// Default values for URLRules fields.
const (
	Default_URLRules_Optional      = bool(false)
	Default_URLRules_AllowFragment = bool(false)
	Default_URLRules_AllowHttp     = bool(false)
)

func (x *URLRules) Reset() {
	*x = URLRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s12_protobuf_proto_validator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLRules) ProtoMessage() {}

func (x *URLRules) ProtoReflect() protoreflect.Message {
	mi := &file_s12_protobuf_proto_validator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLRules.ProtoReflect.Descriptor instead.
func (*URLRules) Descriptor() ([]byte, []int) {
	return file_s12_protobuf_proto_validator_proto_rawDescGZIP(), []int{3}
}

func (x *URLRules) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return Default_URLRules_Optional
}

func (x *URLRules) GetSchemes() []string {
	if x != nil {
		return x.Schemes
	}
	return nil
}

func (x *URLRules) GetAllowFragment() bool {
	if x != nil && x.AllowFragment != nil {
		return *x.AllowFragment
	}
	return Default_URLRules_AllowFragment
}

func (x *URLRules) GetAllowHttp() bool {
	if x != nil && x.AllowHttp != nil {
		return *x.AllowHttp
	}
	return Default_URLRules_AllowHttp
}

// TimezoneRules describe the constraints applied to `timezone` values
type TimezoneRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set this as optional field (not required)
	// default = false
	Optional *bool `protobuf:"varint,1,opt,name=optional,def=0" json:"optional,omitempty"`
}

// Default values for TimezoneRules fields.
const (
	Default_TimezoneRules_Optional = bool(false)
)

func (x *TimezoneRules) Reset() {
	*x = TimezoneRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s12_protobuf_proto_validator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimezoneRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimezoneRules) ProtoMessage() {}

func (x *TimezoneRules) ProtoReflect() protoreflect.Message {
	mi := &file_s12_protobuf_proto_validator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimezoneRules.ProtoReflect.Descriptor instead.
func (*TimezoneRules) Descriptor() ([]byte, []int) {
	return file_s12_protobuf_proto_validator_proto_rawDescGZIP(), []int{4}
}

func (x *TimezoneRules) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return Default_TimezoneRules_Optional
}

var file_s12_protobuf_proto_validator_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         65200,
		Name:          "validator.uuid",
		Tag:           "varint,65200,opt,name=uuid",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         65201,
		Name:          "validator.regex",
		Tag:           "bytes,65201,opt,name=regex",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         65202,
		Name:          "validator.int_gt",
		Tag:           "varint,65202,opt,name=int_gt",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         65203,
		Name:          "validator.int_lt",
		Tag:           "varint,65203,opt,name=int_lt",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         65204,
		Name:          "validator.int_gte",
		Tag:           "varint,65204,opt,name=int_gte",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         65205,
		Name:          "validator.int_lte",
		Tag:           "varint,65205,opt,name=int_lte",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         65206,
		Name:          "validator.length_gte",
		Tag:           "varint,65206,opt,name=length_gte",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         65207,
		Name:          "validator.length_lte",
		Tag:           "varint,65207,opt,name=length_lte",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         65208,
		Name:          "validator.optional",
		Tag:           "varint,65208,opt,name=optional",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         65209,
		Name:          "validator.msg_required",
		Tag:           "varint,65209,opt,name=msg_required",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         65210,
		Name:          "validator.legacy_id",
		Tag:           "varint,65210,opt,name=legacy_id",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         65211,
		Name:          "validator.trim_len_check",
		Tag:           "varint,65211,opt,name=trim_len_check",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         65212,
		Name:          "validator.repeated_len_gte",
		Tag:           "varint,65212,opt,name=repeated_len_gte",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         65213,
		Name:          "validator.repeated_len_lte",
		Tag:           "varint,65213,opt,name=repeated_len_lte",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*EmailRules)(nil),
		Field:         65214,
		Name:          "validator.email",
		Tag:           "bytes,65214,opt,name=email",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*StringRules)(nil),
		Field:         65215,
		Name:          "validator.string",
		Tag:           "bytes,65215,opt,name=string",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*StringRules)(nil),
		Field:         65216,
		Name:          "validator.unsafe_string",
		Tag:           "bytes,65216,opt,name=unsafe_string",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*IdRules)(nil),
		Field:         65217,
		Name:          "validator.id",
		Tag:           "bytes,65217,opt,name=id",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         65218,
		Name:          "validator.enum_required",
		Tag:           "varint,65218,opt,name=enum_required",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*URLRules)(nil),
		Field:         65219,
		Name:          "validator.url",
		Tag:           "bytes,65219,opt,name=url",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*TimezoneRules)(nil),
		Field:         65220,
		Name:          "validator.timezone",
		Tag:           "bytes,65220,opt,name=timezone",
		Filename:      "s12/protobuf/proto/validator.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// Field value validates to a 128 bit universally unique identifier.
	//
	// optional bool uuid = 65200;
	E_Uuid = &file_s12_protobuf_proto_validator_proto_extTypes[0]
	// Uses a Golang RE2-syntax regex to match the field contents.
	//
	// optional string regex = 65201;
	E_Regex = &file_s12_protobuf_proto_validator_proto_extTypes[1]
	// Field value of integer strictly greater than this value.
	//
	// optional int64 int_gt = 65202;
	E_IntGt = &file_s12_protobuf_proto_validator_proto_extTypes[2]
	// Field value of integer strictly smaller than this value.
	//
	// optional int64 int_lt = 65203;
	E_IntLt = &file_s12_protobuf_proto_validator_proto_extTypes[3]
	// Field value of integer greater than or equal to this value.
	//
	// optional int64 int_gte = 65204;
	E_IntGte = &file_s12_protobuf_proto_validator_proto_extTypes[4]
	// Field value of integer smaller than or equal to this value.
	//
	// optional int64 int_lte = 65205;
	E_IntLte = &file_s12_protobuf_proto_validator_proto_extTypes[5]
	// Field value of length greater than this value.
	//
	// optional int64 length_gte = 65206;
	E_LengthGte = &file_s12_protobuf_proto_validator_proto_extTypes[6]
	// Field value of length smaller than this value.
	//
	// optional int64 length_lte = 65207;
	E_LengthLte = &file_s12_protobuf_proto_validator_proto_extTypes[7]
	// Validation only applies to non-zero values.
	//
	// optional bool optional = 65208;
	E_Optional = &file_s12_protobuf_proto_validator_proto_extTypes[8]
	// Validates that an inner message is required.
	//
	// optional bool msg_required = 65209;
	E_MsgRequired = &file_s12_protobuf_proto_validator_proto_extTypes[9]
	// Field value that caters to an upper case universally unique identifier, uuid or a long id.
	//
	// optional bool legacy_id = 65210;
	E_LegacyId = &file_s12_protobuf_proto_validator_proto_extTypes[10]
	// Supplementary validation option to trim leading and trailing whitespaces (as defined by Unicode) before doing length check.
	//
	// optional bool trim_len_check = 65211;
	E_TrimLenCheck = &file_s12_protobuf_proto_validator_proto_extTypes[11]
	// collection size greater than or equal to this value.
	//
	// optional int64 repeated_len_gte = 65212;
	E_RepeatedLenGte = &file_s12_protobuf_proto_validator_proto_extTypes[12]
	// collection size lesser than or equal to this value.
	//
	// optional int64 repeated_len_lte = 65213;
	E_RepeatedLenLte = &file_s12_protobuf_proto_validator_proto_extTypes[13]
	// Uses a go-validator to determine a email address is a valid RFC 5322 address
	// Email validation using IsEmail helper
	//
	// optional validator.EmailRules email = 65214;
	E_Email = &file_s12_protobuf_proto_validator_proto_extTypes[14]
	// New string validators
	// String should be used wherever possible; it does not allow many unsafe inputs by default (can be overriden for limited chars)
	//
	// optional validator.StringRules string = 65215;
	E_String = &file_s12_protobuf_proto_validator_proto_extTypes[15] // == safe_string
	// Unsafe_string is less strict (and less secure) by default, but still does not just accept any values - has to be valid printable ASCII or Unicode letters
	//
	// optional validator.StringRules unsafe_string = 65216;
	E_UnsafeString = &file_s12_protobuf_proto_validator_proto_extTypes[16]
	// Field value validates to a 128 bit universally unique identifier v4, validated using IsUUID or a legacy id
	//
	// optional validator.IdRules id = 65217;
	E_Id = &file_s12_protobuf_proto_validator_proto_extTypes[17]
	// Validates that an enum value is required (or non zero).
	//
	// optional bool enum_required = 65218;
	E_EnumRequired = &file_s12_protobuf_proto_validator_proto_extTypes[18]
	// Validates for a valid URL.
	//
	// optional validator.URLRules url = 65219;
	E_Url = &file_s12_protobuf_proto_validator_proto_extTypes[19]
	// Validates the value is a valid timezone from the IANA Time Zone database.
	//
	// optional validator.TimezoneRules timezone = 65220;
	E_Timezone = &file_s12_protobuf_proto_validator_proto_extTypes[20]
)

var File_s12_protobuf_proto_validator_proto protoreflect.FileDescriptor

var file_s12_protobuf_proto_validator_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x31, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9a, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x72, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x74, 0x72, 0x69, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x12, 0x2a, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x33,
	0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x31, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0c, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x73, 0x65,
	0x5f, 0x70, 0x75, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0b, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x73, 0x65, 0x50, 0x75, 0x61, 0x22, 0x2f,
	0x0a, 0x0a, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0xb6, 0x01, 0x0a, 0x07, 0x49, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a,
	0x02, 0x76, 0x34, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x06,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x05, 0x73,
	0x31, 0x32, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x05, 0x73, 0x31, 0x32, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x55, 0x52, 0x4c,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x48, 0x74, 0x74, 0x70, 0x22, 0x32, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2a, 0x5e, 0x0a, 0x0e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x55, 0x4e, 0x43, 0x54, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x06, 0x3a, 0x33, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xb0, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x3a,
	0x35, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb1, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x3a, 0x36, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x74,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xb2, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x47, 0x74, 0x3a, 0x36,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb3, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x4c, 0x74, 0x3a, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xb4, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x47, 0x74, 0x65,
	0x3a, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb5, 0xfd, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x4c, 0x74, 0x65, 0x3a, 0x3e, 0x0a, 0x0a, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x67, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb6, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x47, 0x74, 0x65, 0x3a, 0x3e, 0x0a, 0x0a, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6c, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb7, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x74, 0x65, 0x3a, 0x3b, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb8, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x42, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb9, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x3c, 0x0a, 0x09, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xba, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x3a, 0x45, 0x0a, 0x0e, 0x74, 0x72, 0x69,
	0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xbb, 0xfd, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x6d, 0x4c, 0x65, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x3a, 0x49, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x5f, 0x67, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xbc, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x3a, 0x49, 0x0a, 0x10, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xbd,
	0xfd, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x3a, 0x4c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xbe,
	0xfd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xbf, 0xfd,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x5c, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc0, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x43, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc1, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x44, 0x0a, 0x0d, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc2, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x46,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc3, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x55, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xc4, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x37, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x31, 0x32, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x31, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_s12_protobuf_proto_validator_proto_rawDescOnce sync.Once
	file_s12_protobuf_proto_validator_proto_rawDescData = file_s12_protobuf_proto_validator_proto_rawDesc
)

func file_s12_protobuf_proto_validator_proto_rawDescGZIP() []byte {
	file_s12_protobuf_proto_validator_proto_rawDescOnce.Do(func() {
		file_s12_protobuf_proto_validator_proto_rawDescData = protoimpl.X.CompressGZIP(file_s12_protobuf_proto_validator_proto_rawDescData)
	})
	return file_s12_protobuf_proto_validator_proto_rawDescData
}

var file_s12_protobuf_proto_validator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_s12_protobuf_proto_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_s12_protobuf_proto_validator_proto_goTypes = []interface{}{
	(SymbolCategory)(0),               // 0: validator.SymbolCategory
	(*StringRules)(nil),               // 1: validator.StringRules
	(*EmailRules)(nil),                // 2: validator.EmailRules
	(*IdRules)(nil),                   // 3: validator.IdRules
	(*URLRules)(nil),                  // 4: validator.URLRules
	(*TimezoneRules)(nil),             // 5: validator.TimezoneRules
	(*descriptorpb.FieldOptions)(nil), // 6: google.protobuf.FieldOptions
}
var file_s12_protobuf_proto_validator_proto_depIdxs = []int32{
	0,  // 0: validator.StringRules.symbols:type_name -> validator.SymbolCategory
	6,  // 1: validator.uuid:extendee -> google.protobuf.FieldOptions
	6,  // 2: validator.regex:extendee -> google.protobuf.FieldOptions
	6,  // 3: validator.int_gt:extendee -> google.protobuf.FieldOptions
	6,  // 4: validator.int_lt:extendee -> google.protobuf.FieldOptions
	6,  // 5: validator.int_gte:extendee -> google.protobuf.FieldOptions
	6,  // 6: validator.int_lte:extendee -> google.protobuf.FieldOptions
	6,  // 7: validator.length_gte:extendee -> google.protobuf.FieldOptions
	6,  // 8: validator.length_lte:extendee -> google.protobuf.FieldOptions
	6,  // 9: validator.optional:extendee -> google.protobuf.FieldOptions
	6,  // 10: validator.msg_required:extendee -> google.protobuf.FieldOptions
	6,  // 11: validator.legacy_id:extendee -> google.protobuf.FieldOptions
	6,  // 12: validator.trim_len_check:extendee -> google.protobuf.FieldOptions
	6,  // 13: validator.repeated_len_gte:extendee -> google.protobuf.FieldOptions
	6,  // 14: validator.repeated_len_lte:extendee -> google.protobuf.FieldOptions
	6,  // 15: validator.email:extendee -> google.protobuf.FieldOptions
	6,  // 16: validator.string:extendee -> google.protobuf.FieldOptions
	6,  // 17: validator.unsafe_string:extendee -> google.protobuf.FieldOptions
	6,  // 18: validator.id:extendee -> google.protobuf.FieldOptions
	6,  // 19: validator.enum_required:extendee -> google.protobuf.FieldOptions
	6,  // 20: validator.url:extendee -> google.protobuf.FieldOptions
	6,  // 21: validator.timezone:extendee -> google.protobuf.FieldOptions
	2,  // 22: validator.email:type_name -> validator.EmailRules
	1,  // 23: validator.string:type_name -> validator.StringRules
	1,  // 24: validator.unsafe_string:type_name -> validator.StringRules
	3,  // 25: validator.id:type_name -> validator.IdRules
	4,  // 26: validator.url:type_name -> validator.URLRules
	5,  // 27: validator.timezone:type_name -> validator.TimezoneRules
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	22, // [22:28] is the sub-list for extension type_name
	1,  // [1:22] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_s12_protobuf_proto_validator_proto_init() }
func file_s12_protobuf_proto_validator_proto_init() {
	if File_s12_protobuf_proto_validator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s12_protobuf_proto_validator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s12_protobuf_proto_validator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s12_protobuf_proto_validator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s12_protobuf_proto_validator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s12_protobuf_proto_validator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimezoneRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s12_protobuf_proto_validator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 21,
			NumServices:   0,
		},
		GoTypes:           file_s12_protobuf_proto_validator_proto_goTypes,
		DependencyIndexes: file_s12_protobuf_proto_validator_proto_depIdxs,
		EnumInfos:         file_s12_protobuf_proto_validator_proto_enumTypes,
		MessageInfos:      file_s12_protobuf_proto_validator_proto_msgTypes,
		ExtensionInfos:    file_s12_protobuf_proto_validator_proto_extTypes,
	}.Build()
	File_s12_protobuf_proto_validator_proto = out.File
	file_s12_protobuf_proto_validator_proto_rawDesc = nil
	file_s12_protobuf_proto_validator_proto_goTypes = nil
	file_s12_protobuf_proto_validator_proto_depIdxs = nil
}

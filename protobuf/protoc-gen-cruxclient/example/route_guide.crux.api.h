// Generated by the CRUX Engine C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto
#pragma once

#include <vector>
#include <string>
#include <memory>

#include <google/protobuf/any.pb.h>
#include "route_guide.grpc.pb.h"

namespace routeguide::v1 {

class ChannelProvider {
 public:
  virtual std::shared_ptr<grpc::Channel> ConnectionChannel() const = 0;
};

namespace RouteGuide {
class GetFeatureAPI {
 public:
  explicit GetFeatureAPI(const std::shared_ptr<ChannelProvider>& provider);
  std::string Name() const;
  grpc::Status Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request,
    routeguide::v1::Feature* response) const;
 private:
  std::unique_ptr<RouteGuide::StubInterface> mStub;
};

class UpdateFeatureAPI {
 public:
  explicit UpdateFeatureAPI(const std::shared_ptr<ChannelProvider>& provider);
  std::string Name() const;
  grpc::Status Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request,
    routeguide::v1::Feature* response) const;
 private:
  std::unique_ptr<RouteGuide::StubInterface> mStub;
};

class ListFeaturesAPI {
 public:
  explicit ListFeaturesAPI(const std::shared_ptr<ChannelProvider>& provider);
  std::string Name() const;
  grpc::Status Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Rectangle& request,
    routeguide::v1::Feature* response) const;
 private:
  std::unique_ptr<RouteGuide::StubInterface> mStub;
};

}  // namespace RouteGuide

namespace PublicRouteGuide {
class GetFeatureAPI {
 public:
  explicit GetFeatureAPI(const std::shared_ptr<ChannelProvider>& provider);
  std::string Name() const;
  grpc::Status Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request,
    routeguide::v1::Feature* response) const;
 private:
  std::unique_ptr<PublicRouteGuide::StubInterface> mStub;
};

}  // namespace PublicRouteGuide

}  // namespace routeguide::v1


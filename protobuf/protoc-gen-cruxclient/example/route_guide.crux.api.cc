// Generated by the CRUX Engine C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto

#include "route_guide.crux.api.h"

namespace routeguide::v1 {

namespace RouteGuide{
GetFeatureAPI(const std::shared_ptr<crux::engine::ChannelProvider>& provider) {
  mStub = routeguide::v1::RouteGuide::NewStub(provider->ConnectionChannel());
}

std::string GetFeatureAPI::Name() const {
  return "routeguide_v1_RouteGuide_GetFeature";
}

std::string GetFeatureAPI::ServiceName() const {
  return "routeguide_v1_RouteGuide";
}

std::string GetFeatureAPI::MethodName() const {
  return "GetFeature";
}

grpc::Status GetFeatureAPI::Execute(
  grpc::ClientContext* context,
  const routeguide::v1::Point& request,
  routeguide::v1::Feature* response) const {
  return mStub->GetFeature(context, request, response);
}

std::unique_ptr<grpc::ClientReaderInterface<routeguide::v1::Feature>> GetFeatureAPI::Execute(
  grpc::ClientContext* context,
  const routeguide::v1::Point& request) const {
  return grpc::Status(grpc::StatusCode::UNIMPLEMENTED, "Please call non-streaming method instead");
}

UpdateFeatureAPI(const std::shared_ptr<crux::engine::ChannelProvider>& provider) {
  mStub = routeguide::v1::RouteGuide::NewStub(provider->ConnectionChannel());
}

std::string UpdateFeatureAPI::Name() const {
  return "routeguide_v1_RouteGuide_UpdateFeature";
}

std::string UpdateFeatureAPI::ServiceName() const {
  return "routeguide_v1_RouteGuide";
}

std::string UpdateFeatureAPI::MethodName() const {
  return "UpdateFeature";
}

grpc::Status UpdateFeatureAPI::Execute(
  grpc::ClientContext* context,
  const routeguide::v1::Point& request,
  routeguide::v1::Feature* response) const {
  return mStub->UpdateFeature(context, request, response);
}

std::unique_ptr<grpc::ClientReaderInterface<routeguide::v1::Feature>> UpdateFeatureAPI::Execute(
  grpc::ClientContext* context,
  const routeguide::v1::Point& request) const {
  return grpc::Status(grpc::StatusCode::UNIMPLEMENTED, "Please call non-streaming method instead");
}

ListFeaturesAPI(const std::shared_ptr<crux::engine::ChannelProvider>& provider) {
  mStub = routeguide::v1::RouteGuide::NewStub(provider->ConnectionChannel());
}

std::string ListFeaturesAPI::Name() const {
  return "routeguide_v1_RouteGuide_ListFeatures";
}

std::string ListFeaturesAPI::ServiceName() const {
  return "routeguide_v1_RouteGuide";
}

std::string ListFeaturesAPI::MethodName() const {
  return "ListFeatures";
}

grpc::Status ListFeaturesAPI::Execute(
  grpc::ClientContext* context,
  const routeguide::v1::Rectangle& request,
  routeguide::v1::Feature* response) const {
  return grpc::Status(grpc::StatusCode::UNIMPLEMENTED, "Please call streaming method instead");
}

std::unique_ptr<grpc::ClientReaderInterface<routeguide::v1::Feature>> ListFeaturesAPI::Execute(
  grpc::ClientContext* context,
  const routeguide::v1::Rectangle& request) const {
  return mStub->ListFeatures(context, request);
}

}  // namespace RouteGuide

namespace PublicRouteGuide{
GetFeatureAPI(const std::shared_ptr<crux::engine::ChannelProvider>& provider) {
  mStub = routeguide::v1::PublicRouteGuide::NewStub(provider->ConnectionChannel());
}

std::string GetFeatureAPI::Name() const {
  return "routeguide_v1_PublicRouteGuide_GetFeature";
}

std::string GetFeatureAPI::ServiceName() const {
  return "routeguide_v1_PublicRouteGuide";
}

std::string GetFeatureAPI::MethodName() const {
  return "GetFeature";
}

grpc::Status GetFeatureAPI::Execute(
  grpc::ClientContext* context,
  const routeguide::v1::Point& request,
  routeguide::v1::Feature* response) const {
  return mStub->GetFeature(context, request, response);
}

std::unique_ptr<grpc::ClientReaderInterface<routeguide::v1::Feature>> GetFeatureAPI::Execute(
  grpc::ClientContext* context,
  const routeguide::v1::Point& request) const {
  return grpc::Status(grpc::StatusCode::UNIMPLEMENTED, "Please call non-streaming method instead");
}

}  // namespace PublicRouteGuide


}  // namespace routeguide::v1


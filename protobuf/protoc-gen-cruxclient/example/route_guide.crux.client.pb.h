// Generated by the CRUX Service Client C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto
#pragma once

#include <vector>
#include <string>
#include <memory>

#include <google/protobuf/any.pb.h>
#include "route_guide.grpc.pb.h"
#include "s12_client_support.hpp"

namespace routeguide {
namespace v1 {

const char kRouteGuideGetFeature[] = "/routeguide.v1.RouteGuide/GetFeature";
const char kRouteGuideUpdateFeature[] = "/routeguide.v1.RouteGuide/UpdateFeature";
const char kRouteGuideListFeatures[] = "/routeguide.v1.RouteGuide/ListFeatures";
class RouteGuideClientInterface {
 public:
  virtual ~RouteGuideClientInterface() {}
  virtual void Invoke(const google::protobuf::Any& request_data, const std::string& method) const {}
  virtual routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const = 0;
  virtual routeguide::v1::Feature UpdateFeature(const routeguide::v1::Point& request) const = 0;
  virtual std::vector<routeguide::v1::Feature> ListFeatures(const routeguide::v1::Rectangle& request) const = 0;
};

const char kPublicRouteGuideGetFeature[] = "/routeguide.v1.PublicRouteGuide/GetFeature";
class PublicRouteGuideClientInterface {
 public:
  virtual ~PublicRouteGuideClientInterface() {}
  virtual void Invoke(const google::protobuf::Any& request_data, const std::string& method) const {}
  virtual routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const = 0;
};

class RouteGuideClient: public RouteGuideClientInterface {
 public:
  explicit RouteGuideClient(const std::shared_ptr<RouteGuide::StubInterface>& stub);
  void Invoke(const google::protobuf::Any& request_data, const std::string& method) const override;
  routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const override;
  routeguide::v1::Feature UpdateFeature(const routeguide::v1::Point& request) const override;
  std::vector<routeguide::v1::Feature> ListFeatures(const routeguide::v1::Rectangle& request) const override;

 private:
  std::shared_ptr<RouteGuide::StubInterface> mStub;

};

class PublicRouteGuideClient: public PublicRouteGuideClientInterface {
 public:
  explicit PublicRouteGuideClient(const std::shared_ptr<PublicRouteGuide::StubInterface>& stub);
  void Invoke(const google::protobuf::Any& request_data, const std::string& method) const override;
  routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const override;

 private:
  std::shared_ptr<PublicRouteGuide::StubInterface> mStub;

};

class MockRouteGuideClient: public RouteGuideClientInterface {
 public:
  mutable int mInvokeCalledCount = 0;
  mutable std::vector<google::protobuf::Any> mInvokeRequestData;
  mutable std::vector<std::string> mInvokeMethods;
  bool mInvokeThrowParseException = false;
  grpc::StatusCode mInvokeErrorStatusCode = grpc::StatusCode::INVALID_ARGUMENT;
  mutable int mInvokeExceptionThrowCount = 0;
  void Invoke(const google::protobuf::Any& request_data, const std::string& method) const override {
    mInvokeCalledCount++;
    mInvokeRequestData.push_back(request_data);
    mInvokeMethods.push_back(method);
    if (mInvokeThrowParseException) {
      throw crux::RequestParseException();
    }
    if (mInvokeExceptionThrowCount > 0) {
      mInvokeExceptionThrowCount--;
      throw crux::ServiceException(mInvokeErrorStatusCode, "Error");
    }
  }
  mutable int mGetFeatureCalledCount = 0;
  mutable std::vector<routeguide::v1::Point> mGetFeatureRequests;
  routeguide::v1::Feature mGetFeatureResponse;
  grpc::StatusCode mGetFeatureErrorStatusCode = grpc::StatusCode::INVALID_ARGUMENT;
  mutable int mGetFeatureExceptionThrowCount = 0;
  routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const override {
    mGetFeatureCalledCount++;
    mGetFeatureRequests.push_back(request);
    if (mGetFeatureExceptionThrowCount > 0) {
      mGetFeatureExceptionThrowCount--;
      throw crux::ServiceException(mGetFeatureErrorStatusCode, "Error");
    }
    return mGetFeatureResponse;
  }

  mutable int mUpdateFeatureCalledCount = 0;
  mutable std::vector<routeguide::v1::Point> mUpdateFeatureRequests;
  routeguide::v1::Feature mUpdateFeatureResponse;
  grpc::StatusCode mUpdateFeatureErrorStatusCode = grpc::StatusCode::INVALID_ARGUMENT;
  mutable int mUpdateFeatureExceptionThrowCount = 0;
  routeguide::v1::Feature UpdateFeature(const routeguide::v1::Point& request) const override {
    mUpdateFeatureCalledCount++;
    mUpdateFeatureRequests.push_back(request);
    if (mUpdateFeatureExceptionThrowCount > 0) {
      mUpdateFeatureExceptionThrowCount--;
      throw crux::ServiceException(mUpdateFeatureErrorStatusCode, "Error");
    }
    return mUpdateFeatureResponse;
  }

  mutable int mListFeaturesCalledCount = 0;
  mutable std::vector<routeguide::v1::Rectangle> mListFeaturesRequests;
  std::vector<routeguide::v1::Feature> mListFeaturesResponse;
  grpc::StatusCode mListFeaturesErrorStatusCode = grpc::StatusCode::INVALID_ARGUMENT;
  mutable int mListFeaturesExceptionThrowCount = 0;
  std::vector<routeguide::v1::Feature> ListFeatures(const routeguide::v1::Rectangle& request) const override {
    mListFeaturesCalledCount++;
    mListFeaturesRequests.push_back(request);
    if (mListFeaturesExceptionThrowCount > 0) {
      mListFeaturesExceptionThrowCount--;
      throw crux::ServiceException(mListFeaturesErrorStatusCode, "Error");
    }
    return mListFeaturesResponse;
  }

};

class MockPublicRouteGuideClient: public PublicRouteGuideClientInterface {
 public:
  mutable int mInvokeCalledCount = 0;
  mutable std::vector<google::protobuf::Any> mInvokeRequestData;
  mutable std::vector<std::string> mInvokeMethods;
  bool mInvokeThrowParseException = false;
  grpc::StatusCode mInvokeErrorStatusCode = grpc::StatusCode::INVALID_ARGUMENT;
  mutable int mInvokeExceptionThrowCount = 0;
  void Invoke(const google::protobuf::Any& request_data, const std::string& method) const override {
    mInvokeCalledCount++;
    mInvokeRequestData.push_back(request_data);
    mInvokeMethods.push_back(method);
    if (mInvokeThrowParseException) {
      throw crux::RequestParseException();
    }
    if (mInvokeExceptionThrowCount > 0) {
      mInvokeExceptionThrowCount--;
      throw crux::ServiceException(mInvokeErrorStatusCode, "Error");
    }
  }
  mutable int mGetFeatureCalledCount = 0;
  mutable std::vector<routeguide::v1::Point> mGetFeatureRequests;
  routeguide::v1::Feature mGetFeatureResponse;
  grpc::StatusCode mGetFeatureErrorStatusCode = grpc::StatusCode::INVALID_ARGUMENT;
  mutable int mGetFeatureExceptionThrowCount = 0;
  routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const override {
    mGetFeatureCalledCount++;
    mGetFeatureRequests.push_back(request);
    if (mGetFeatureExceptionThrowCount > 0) {
      mGetFeatureExceptionThrowCount--;
      throw crux::ServiceException(mGetFeatureErrorStatusCode, "Error");
    }
    return mGetFeatureResponse;
  }

};

}
}


// Generated by the CRUX Engine C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto
#pragma once

#include <vector>
#include <string>
#include <memory>

#include <google/protobuf/any.pb.h>
#include "route_guide.grpc.pb.h"
namespace routeguide.v1 {
const char kRouteGuideGetFeature[] = "/routeguide.v1.RouteGuide/GetFeature";
const char kRouteGuideUpdateFeature[] = "/routeguide.v1.RouteGuide/UpdateFeature";
const char kRouteGuideListFeatures[] = "/routeguide.v1.RouteGuide/ListFeatures";
class RouteGuideClientInterface {
 public:
  virtual ~RouteGuideClientInterface() {}
  virtual void Invoke(const google::protobuf::Any& request_data, const std::string& method) const {}
  virtual routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const = 0;
  virtual routeguide::v1::Feature UpdateFeature(const routeguide::v1::Point& request) const = 0;
  virtual std::vector<routeguide::v1::Feature> ListFeatures(const routeguide::v1::Rectangle& request) const = 0;
};

const char kPublicRouteGuideGetFeature[] = "/routeguide.v1.PublicRouteGuide/GetFeature";
class PublicRouteGuideClientInterface {
 public:
  virtual ~PublicRouteGuideClientInterface() {}
  virtual void Invoke(const google::protobuf::Any& request_data, const std::string& method) const {}
  virtual routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const = 0;
};

class RouteGuideClient: public RouteGuideClientInterface {
 public:
  RouteGuideClient(const std::shared_ptr<RouteGuide::StubInterface>& stub);
  void Invoke(const google::protobuf::Any& request_data, const std::string& method) const override;
  routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const override;
  routeguide::v1::Feature UpdateFeature(const routeguide::v1::Point& request) const override;
  std::vector<routeguide::v1::Feature> ListFeatures(const routeguide::v1::Rectangle& request) const override;

 private:
  std::shared_ptr<RouteGuide::StubInterface> mStub;
};

class PublicRouteGuideClient: public PublicRouteGuideClientInterface {
 public:
  PublicRouteGuideClient(const std::shared_ptr<PublicRouteGuide::StubInterface>& stub);
  void Invoke(const google::protobuf::Any& request_data, const std::string& method) const override;
  routeguide::v1::Feature GetFeature(const routeguide::v1::Point& request) const override;

 private:
  std::shared_ptr<PublicRouteGuide::StubInterface> mStub;
};

}  // namespace routeguide.v1

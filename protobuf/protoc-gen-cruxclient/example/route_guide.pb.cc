// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_guide.proto

#include "route_guide.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_route_5fguide_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_route_5fguide_2eproto;
namespace routeguide {
namespace v1 {
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class RectangleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rectangle> _instance;
} _Rectangle_default_instance_;
class FeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feature> _instance;
} _Feature_default_instance_;
class RouteNoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteNote> _instance;
} _RouteNote_default_instance_;
class RouteSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteSummary> _instance;
} _RouteSummary_default_instance_;
}  // namespace v1
}  // namespace routeguide
static void InitDefaultsscc_info_Feature_route_5fguide_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routeguide::v1::_Feature_default_instance_;
    new (ptr) ::routeguide::v1::Feature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routeguide::v1::Feature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Feature_route_5fguide_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Feature_route_5fguide_2eproto}, {
      &scc_info_Point_route_5fguide_2eproto.base,}};

static void InitDefaultsscc_info_Point_route_5fguide_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routeguide::v1::_Point_default_instance_;
    new (ptr) ::routeguide::v1::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routeguide::v1::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_route_5fguide_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_route_5fguide_2eproto}, {}};

static void InitDefaultsscc_info_Rectangle_route_5fguide_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routeguide::v1::_Rectangle_default_instance_;
    new (ptr) ::routeguide::v1::Rectangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routeguide::v1::Rectangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rectangle_route_5fguide_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rectangle_route_5fguide_2eproto}, {
      &scc_info_Point_route_5fguide_2eproto.base,}};

static void InitDefaultsscc_info_RouteNote_route_5fguide_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routeguide::v1::_RouteNote_default_instance_;
    new (ptr) ::routeguide::v1::RouteNote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routeguide::v1::RouteNote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteNote_route_5fguide_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouteNote_route_5fguide_2eproto}, {
      &scc_info_Point_route_5fguide_2eproto.base,}};

static void InitDefaultsscc_info_RouteSummary_route_5fguide_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routeguide::v1::_RouteSummary_default_instance_;
    new (ptr) ::routeguide::v1::RouteSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routeguide::v1::RouteSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSummary_route_5fguide_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteSummary_route_5fguide_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_route_5fguide_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_route_5fguide_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_route_5fguide_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_route_5fguide_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Point, latitude_),
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Point, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Rectangle, lo_),
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Rectangle, hi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Feature, name_),
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::Feature, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::RouteNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::RouteNote, location_),
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::RouteNote, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::RouteSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::RouteSummary, point_count_),
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::RouteSummary, feature_count_),
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::RouteSummary, distance_),
  PROTOBUF_FIELD_OFFSET(::routeguide::v1::RouteSummary, elapsed_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::routeguide::v1::Point)},
  { 7, -1, sizeof(::routeguide::v1::Rectangle)},
  { 14, -1, sizeof(::routeguide::v1::Feature)},
  { 21, -1, sizeof(::routeguide::v1::RouteNote)},
  { 28, -1, sizeof(::routeguide::v1::RouteSummary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routeguide::v1::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routeguide::v1::_Rectangle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routeguide::v1::_Feature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routeguide::v1::_RouteNote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routeguide::v1::_RouteSummary_default_instance_),
};

const char descriptor_table_protodef_route_5fguide_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021route_guide.proto\022\rrouteguide.v1\",\n\005Po"
  "int\022\020\n\010latitude\030\001 \001(\005\022\021\n\tlongitude\030\002 \001(\005"
  "\"O\n\tRectangle\022 \n\002lo\030\001 \001(\0132\024.routeguide.v"
  "1.Point\022 \n\002hi\030\002 \001(\0132\024.routeguide.v1.Poin"
  "t\"\?\n\007Feature\022\014\n\004name\030\001 \001(\t\022&\n\010location\030\002"
  " \001(\0132\024.routeguide.v1.Point\"D\n\tRouteNote\022"
  "&\n\010location\030\001 \001(\0132\024.routeguide.v1.Point\022"
  "\017\n\007message\030\002 \001(\t\"b\n\014RouteSummary\022\023\n\013poin"
  "t_count\030\001 \001(\005\022\025\n\rfeature_count\030\002 \001(\005\022\020\n\010"
  "distance\030\003 \001(\005\022\024\n\014elapsed_time\030\004 \001(\0052\336\002\n"
  "\nRouteGuide\022<\n\nGetFeature\022\024.routeguide.v"
  "1.Point\032\026.routeguide.v1.Feature\"\000\022\?\n\rUpd"
  "ateFeature\022\024.routeguide.v1.Point\032\026.route"
  "guide.v1.Feature\"\000\022D\n\014ListFeatures\022\030.rou"
  "teguide.v1.Rectangle\032\026.routeguide.v1.Fea"
  "ture\"\0000\001\022D\n\013RecordRoute\022\024.routeguide.v1."
  "Point\032\033.routeguide.v1.RouteSummary\"\000(\001\022E"
  "\n\tRouteChat\022\030.routeguide.v1.RouteNote\032\030."
  "routeguide.v1.RouteNote\"\000(\0010\0012P\n\020PublicR"
  "outeGuide\022<\n\nGetFeature\022\024.routeguide.v1."
  "Point\032\026.routeguide.v1.Feature\"\000B6\n\033io.gr"
  "pc.examples.routeguideB\017RouteGuideProtoP"
  "\001\242\002\003RTGb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_route_5fguide_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_route_5fguide_2eproto_sccs[5] = {
  &scc_info_Feature_route_5fguide_2eproto.base,
  &scc_info_Point_route_5fguide_2eproto.base,
  &scc_info_Rectangle_route_5fguide_2eproto.base,
  &scc_info_RouteNote_route_5fguide_2eproto.base,
  &scc_info_RouteSummary_route_5fguide_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_route_5fguide_2eproto_once;
static bool descriptor_table_route_5fguide_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_route_5fguide_2eproto = {
  &descriptor_table_route_5fguide_2eproto_initialized, descriptor_table_protodef_route_5fguide_2eproto, "route_guide.proto", 895,
  &descriptor_table_route_5fguide_2eproto_once, descriptor_table_route_5fguide_2eproto_sccs, descriptor_table_route_5fguide_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_route_5fguide_2eproto::offsets,
  file_level_metadata_route_5fguide_2eproto, 5, file_level_enum_descriptors_route_5fguide_2eproto, file_level_service_descriptors_route_5fguide_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_route_5fguide_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_route_5fguide_2eproto), true);
namespace routeguide {
namespace v1 {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
};

Point::Point()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.v1.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:routeguide.v1.Point)
}

void Point::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:routeguide.v1.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_route_5fguide_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.v1.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.v1.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 latitude = 1;
  if (this->latitude() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_latitude(), target);
  }

  // int32 longitude = 2;
  if (this->longitude() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.v1.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.v1.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_latitude());
  }

  // int32 longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_longitude());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routeguide.v1.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routeguide.v1.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routeguide.v1.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routeguide.v1.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude() != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from.longitude() != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routeguide.v1.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.v1.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
  ::routeguide::v1::_Rectangle_default_instance_._instance.get_mutable()->lo_ = const_cast< ::routeguide::v1::Point*>(
      ::routeguide::v1::Point::internal_default_instance());
  ::routeguide::v1::_Rectangle_default_instance_._instance.get_mutable()->hi_ = const_cast< ::routeguide::v1::Point*>(
      ::routeguide::v1::Point::internal_default_instance());
}
class Rectangle::_Internal {
 public:
  static const ::routeguide::v1::Point& lo(const Rectangle* msg);
  static const ::routeguide::v1::Point& hi(const Rectangle* msg);
};

const ::routeguide::v1::Point&
Rectangle::_Internal::lo(const Rectangle* msg) {
  return *msg->lo_;
}
const ::routeguide::v1::Point&
Rectangle::_Internal::hi(const Rectangle* msg) {
  return *msg->hi_;
}
Rectangle::Rectangle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.v1.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lo()) {
    lo_ = new ::routeguide::v1::Point(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  if (from._internal_has_hi()) {
    hi_ = new ::routeguide::v1::Point(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:routeguide.v1.Rectangle)
}

void Rectangle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rectangle_route_5fguide_2eproto.base);
  ::memset(&lo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) -
      reinterpret_cast<char*>(&lo_)) + sizeof(hi_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:routeguide.v1.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
  if (this != internal_default_instance()) delete lo_;
  if (this != internal_default_instance()) delete hi_;
}

void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rectangle& Rectangle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rectangle_route_5fguide_2eproto.base);
  return *internal_default_instance();
}


void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.v1.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Rectangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .routeguide.v1.Point lo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .routeguide.v1.Point hi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rectangle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.v1.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .routeguide.v1.Point lo = 1;
  if (this->has_lo()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::lo(this), target, stream);
  }

  // .routeguide.v1.Point hi = 2;
  if (this->has_hi()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::hi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.v1.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.v1.Rectangle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .routeguide.v1.Point lo = 1;
  if (this->has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  // .routeguide.v1.Point hi = 2;
  if (this->has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routeguide.v1.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rectangle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routeguide.v1.Rectangle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routeguide.v1.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routeguide.v1.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lo()) {
    _internal_mutable_lo()->::routeguide::v1::Point::MergeFrom(from._internal_lo());
  }
  if (from.has_hi()) {
    _internal_mutable_hi()->::routeguide::v1::Point::MergeFrom(from._internal_hi());
  }
}

void Rectangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routeguide.v1.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.v1.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lo_, other->lo_);
  swap(hi_, other->hi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rectangle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Feature::InitAsDefaultInstance() {
  ::routeguide::v1::_Feature_default_instance_._instance.get_mutable()->location_ = const_cast< ::routeguide::v1::Point*>(
      ::routeguide::v1::Point::internal_default_instance());
}
class Feature::_Internal {
 public:
  static const ::routeguide::v1::Point& location(const Feature* msg);
};

const ::routeguide::v1::Point&
Feature::_Internal::location(const Feature* msg) {
  return *msg->location_;
}
Feature::Feature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.v1.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_location()) {
    location_ = new ::routeguide::v1::Point(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:routeguide.v1.Feature)
}

void Feature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Feature_route_5fguide_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_ = nullptr;
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:routeguide.v1.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feature& Feature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feature_route_5fguide_2eproto.base);
  return *internal_default_instance();
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.v1.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "routeguide.v1.Feature.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .routeguide.v1.Point location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feature::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.v1.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routeguide.v1.Feature.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .routeguide.v1.Point location = 2;
  if (this->has_location()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.v1.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.v1.Feature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .routeguide.v1.Point location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routeguide.v1.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routeguide.v1.Feature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routeguide.v1.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routeguide.v1.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    _internal_mutable_location()->::routeguide::v1::Point::MergeFrom(from._internal_location());
  }
}

void Feature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routeguide.v1.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.v1.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteNote::InitAsDefaultInstance() {
  ::routeguide::v1::_RouteNote_default_instance_._instance.get_mutable()->location_ = const_cast< ::routeguide::v1::Point*>(
      ::routeguide::v1::Point::internal_default_instance());
}
class RouteNote::_Internal {
 public:
  static const ::routeguide::v1::Point& location(const RouteNote* msg);
};

const ::routeguide::v1::Point&
RouteNote::_Internal::location(const RouteNote* msg) {
  return *msg->location_;
}
RouteNote::RouteNote()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.v1.RouteNote)
}
RouteNote::RouteNote(const RouteNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from._internal_has_location()) {
    location_ = new ::routeguide::v1::Point(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:routeguide.v1.RouteNote)
}

void RouteNote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteNote_route_5fguide_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_ = nullptr;
}

RouteNote::~RouteNote() {
  // @@protoc_insertion_point(destructor:routeguide.v1.RouteNote)
  SharedDtor();
}

void RouteNote::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void RouteNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteNote& RouteNote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteNote_route_5fguide_2eproto.base);
  return *internal_default_instance();
}


void RouteNote::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.v1.RouteNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RouteNote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .routeguide.v1.Point location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message(), ptr, ctx, "routeguide.v1.RouteNote.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteNote::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.v1.RouteNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .routeguide.v1.Point location = 1;
  if (this->has_location()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::location(this), target, stream);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routeguide.v1.RouteNote.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.v1.RouteNote)
  return target;
}

size_t RouteNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.v1.RouteNote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .routeguide.v1.Point location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteNote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routeguide.v1.RouteNote)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteNote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteNote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routeguide.v1.RouteNote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routeguide.v1.RouteNote)
    MergeFrom(*source);
  }
}

void RouteNote::MergeFrom(const RouteNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routeguide.v1.RouteNote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_location()) {
    _internal_mutable_location()->::routeguide::v1::Point::MergeFrom(from._internal_location());
  }
}

void RouteNote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routeguide.v1.RouteNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteNote::CopyFrom(const RouteNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.v1.RouteNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNote::IsInitialized() const {
  return true;
}

void RouteNote::InternalSwap(RouteNote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteNote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteSummary::InitAsDefaultInstance() {
}
class RouteSummary::_Internal {
 public:
};

RouteSummary::RouteSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routeguide.v1.RouteSummary)
}
RouteSummary::RouteSummary(const RouteSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_count_, &from.point_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&elapsed_time_) -
    reinterpret_cast<char*>(&point_count_)) + sizeof(elapsed_time_));
  // @@protoc_insertion_point(copy_constructor:routeguide.v1.RouteSummary)
}

void RouteSummary::SharedCtor() {
  ::memset(&point_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elapsed_time_) -
      reinterpret_cast<char*>(&point_count_)) + sizeof(elapsed_time_));
}

RouteSummary::~RouteSummary() {
  // @@protoc_insertion_point(destructor:routeguide.v1.RouteSummary)
  SharedDtor();
}

void RouteSummary::SharedDtor() {
}

void RouteSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteSummary& RouteSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteSummary_route_5fguide_2eproto.base);
  return *internal_default_instance();
}


void RouteSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:routeguide.v1.RouteSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&point_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elapsed_time_) -
      reinterpret_cast<char*>(&point_count_)) + sizeof(elapsed_time_));
  _internal_metadata_.Clear();
}

const char* RouteSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 point_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          point_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 feature_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          feature_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 elapsed_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteSummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routeguide.v1.RouteSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 point_count = 1;
  if (this->point_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_point_count(), target);
  }

  // int32 feature_count = 2;
  if (this->feature_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_feature_count(), target);
  }

  // int32 distance = 3;
  if (this->distance() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_distance(), target);
  }

  // int32 elapsed_time = 4;
  if (this->elapsed_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_elapsed_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routeguide.v1.RouteSummary)
  return target;
}

size_t RouteSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routeguide.v1.RouteSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 point_count = 1;
  if (this->point_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_point_count());
  }

  // int32 feature_count = 2;
  if (this->feature_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_feature_count());
  }

  // int32 distance = 3;
  if (this->distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_distance());
  }

  // int32 elapsed_time = 4;
  if (this->elapsed_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_elapsed_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routeguide.v1.RouteSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routeguide.v1.RouteSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routeguide.v1.RouteSummary)
    MergeFrom(*source);
  }
}

void RouteSummary::MergeFrom(const RouteSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routeguide.v1.RouteSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.point_count() != 0) {
    _internal_set_point_count(from._internal_point_count());
  }
  if (from.feature_count() != 0) {
    _internal_set_feature_count(from._internal_feature_count());
  }
  if (from.distance() != 0) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.elapsed_time() != 0) {
    _internal_set_elapsed_time(from._internal_elapsed_time());
  }
}

void RouteSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routeguide.v1.RouteSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSummary::CopyFrom(const RouteSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routeguide.v1.RouteSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSummary::IsInitialized() const {
  return true;
}

void RouteSummary::InternalSwap(RouteSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(point_count_, other->point_count_);
  swap(feature_count_, other->feature_count_);
  swap(distance_, other->distance_);
  swap(elapsed_time_, other->elapsed_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace routeguide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::routeguide::v1::Point* Arena::CreateMaybeMessage< ::routeguide::v1::Point >(Arena* arena) {
  return Arena::CreateInternal< ::routeguide::v1::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::routeguide::v1::Rectangle* Arena::CreateMaybeMessage< ::routeguide::v1::Rectangle >(Arena* arena) {
  return Arena::CreateInternal< ::routeguide::v1::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::routeguide::v1::Feature* Arena::CreateMaybeMessage< ::routeguide::v1::Feature >(Arena* arena) {
  return Arena::CreateInternal< ::routeguide::v1::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::routeguide::v1::RouteNote* Arena::CreateMaybeMessage< ::routeguide::v1::RouteNote >(Arena* arena) {
  return Arena::CreateInternal< ::routeguide::v1::RouteNote >(arena);
}
template<> PROTOBUF_NOINLINE ::routeguide::v1::RouteSummary* Arena::CreateMaybeMessage< ::routeguide::v1::RouteSummary >(Arena* arena) {
  return Arena::CreateInternal< ::routeguide::v1::RouteSummary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

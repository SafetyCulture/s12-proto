// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: routeguide/v1/route_guide.proto
// Original file comments:
// Copyright 2015 gRPC authors.
// Copied from https://github.com/grpc/grpc/blob/v1.20.0/examples/protos/route_guide.proto
//
#ifndef GRPC_routeguide_2fv1_2froute_5fguide_2eproto__INCLUDED
#define GRPC_routeguide_2fv1_2froute_5fguide_2eproto__INCLUDED

#include "routeguide/v1/route_guide.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace routeguide {
namespace v1 {

// Interface exported by the server.
class RouteGuide final {
 public:
  static constexpr char const* service_full_name() {
    return "routeguide.v1.RouteGuide";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::routeguide::v1::Feature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>> AsyncGetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>>(AsyncGetFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>> PrepareAsyncGetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>>(PrepareAsyncGetFeatureRaw(context, request, cq));
    }
    // A simple RPC.
    //
    // Update the feature at a given position.
    //
    // The updated feature is returned at the given position.
    virtual ::grpc::Status UpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::routeguide::v1::Feature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>> AsyncUpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>>(AsyncUpdateFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>> PrepareAsyncUpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>>(PrepareAsyncUpdateFeatureRaw(context, request, cq));
    }
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::routeguide::v1::Feature>> ListFeatures(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::routeguide::v1::Feature>>(ListFeaturesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routeguide::v1::Feature>> AsyncListFeatures(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routeguide::v1::Feature>>(AsyncListFeaturesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routeguide::v1::Feature>> PrepareAsyncListFeatures(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routeguide::v1::Feature>>(PrepareAsyncListFeaturesRaw(context, request, cq));
    }
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::routeguide::v1::Point>> RecordRoute(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::routeguide::v1::Point>>(RecordRouteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::routeguide::v1::Point>> AsyncRecordRoute(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::routeguide::v1::Point>>(AsyncRecordRouteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::routeguide::v1::Point>> PrepareAsyncRecordRoute(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::routeguide::v1::Point>>(PrepareAsyncRecordRouteRaw(context, response, cq));
    }
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>> RouteChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>>(RouteChatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>> AsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>>(AsyncRouteChatRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>> PrepareAsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>>(PrepareAsyncRouteChatRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // A simple RPC.
      //
      // Obtains the feature at a given position.
      //
      // A feature with an empty name is returned if there's no feature at the given
      // position.
      virtual void GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // A simple RPC.
      //
      // Update the feature at a given position.
      //
      // The updated feature is returned at the given position.
      virtual void UpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // A server-to-client streaming RPC.
      //
      // Obtains the Features available within the given Rectangle.  Results are
      // streamed rather than returned at once (e.g. in a response message with a
      // repeated field), as the rectangle may cover a large area and contain a
      // huge number of features.
      virtual void ListFeatures(::grpc::ClientContext* context, ::routeguide::v1::Rectangle* request, ::grpc::experimental::ClientReadReactor< ::routeguide::v1::Feature>* reactor) = 0;
      // A client-to-server streaming RPC.
      //
      // Accepts a stream of Points on a route being traversed, returning a
      // RouteSummary when traversal is completed.
      virtual void RecordRoute(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::experimental::ClientWriteReactor< ::routeguide::v1::Point>* reactor) = 0;
      // A Bidirectional streaming RPC.
      //
      // Accepts a stream of RouteNotes sent while a route is being traversed,
      // while receiving other RouteNotes (e.g. from other users).
      virtual void RouteChat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::routeguide::v1::RouteNote,::routeguide::v1::RouteNote>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>* AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>* PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>* AsyncUpdateFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>* PrepareAsyncUpdateFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::routeguide::v1::Feature>* ListFeaturesRaw(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::routeguide::v1::Feature>* AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::routeguide::v1::Feature>* PrepareAsyncListFeaturesRaw(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::routeguide::v1::Point>* RecordRouteRaw(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::routeguide::v1::Point>* AsyncRecordRouteRaw(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::routeguide::v1::Point>* PrepareAsyncRecordRouteRaw(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* RouteChatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* PrepareAsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::routeguide::v1::Feature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>> AsyncGetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>>(AsyncGetFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>> PrepareAsyncGetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>>(PrepareAsyncGetFeatureRaw(context, request, cq));
    }
    ::grpc::Status UpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::routeguide::v1::Feature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>> AsyncUpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>>(AsyncUpdateFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>> PrepareAsyncUpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>>(PrepareAsyncUpdateFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::routeguide::v1::Feature>> ListFeatures(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::routeguide::v1::Feature>>(ListFeaturesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::routeguide::v1::Feature>> AsyncListFeatures(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::routeguide::v1::Feature>>(AsyncListFeaturesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::routeguide::v1::Feature>> PrepareAsyncListFeatures(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::routeguide::v1::Feature>>(PrepareAsyncListFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::routeguide::v1::Point>> RecordRoute(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::routeguide::v1::Point>>(RecordRouteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::routeguide::v1::Point>> AsyncRecordRoute(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::routeguide::v1::Point>>(AsyncRecordRouteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::routeguide::v1::Point>> PrepareAsyncRecordRoute(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::routeguide::v1::Point>>(PrepareAsyncRecordRouteRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>> RouteChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>>(RouteChatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>> AsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>>(AsyncRouteChatRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>> PrepareAsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>>(PrepareAsyncRouteChatRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) override;
      void GetFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) override;
      void GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) override;
      void UpdateFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) override;
      void UpdateFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListFeatures(::grpc::ClientContext* context, ::routeguide::v1::Rectangle* request, ::grpc::experimental::ClientReadReactor< ::routeguide::v1::Feature>* reactor) override;
      void RecordRoute(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::experimental::ClientWriteReactor< ::routeguide::v1::Point>* reactor) override;
      void RouteChat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::routeguide::v1::RouteNote,::routeguide::v1::RouteNote>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>* AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>* PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>* AsyncUpdateFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>* PrepareAsyncUpdateFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::routeguide::v1::Feature>* ListFeaturesRaw(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request) override;
    ::grpc::ClientAsyncReader< ::routeguide::v1::Feature>* AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::routeguide::v1::Feature>* PrepareAsyncListFeaturesRaw(::grpc::ClientContext* context, const ::routeguide::v1::Rectangle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::routeguide::v1::Point>* RecordRouteRaw(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response) override;
    ::grpc::ClientAsyncWriter< ::routeguide::v1::Point>* AsyncRecordRouteRaw(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::routeguide::v1::Point>* PrepareAsyncRecordRouteRaw(::grpc::ClientContext* context, ::routeguide::v1::RouteSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* RouteChatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* PrepareAsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFeatures_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordRoute_;
    const ::grpc::internal::RpcMethod rpcmethod_RouteChat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetFeature(::grpc::ServerContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response);
    // A simple RPC.
    //
    // Update the feature at a given position.
    //
    // The updated feature is returned at the given position.
    virtual ::grpc::Status UpdateFeature(::grpc::ServerContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response);
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    virtual ::grpc::Status ListFeatures(::grpc::ServerContext* context, const ::routeguide::v1::Rectangle* request, ::grpc::ServerWriter< ::routeguide::v1::Feature>* writer);
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    virtual ::grpc::Status RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::routeguide::v1::Point>* reader, ::routeguide::v1::RouteSummary* response);
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    virtual ::grpc::Status RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFeature() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFeature(::grpc::ServerContext* context, ::routeguide::v1::Point* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::v1::Feature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateFeature() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFeature(::grpc::ServerContext* context, ::routeguide::v1::Point* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::v1::Feature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListFeatures() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Rectangle* /*request*/, ::grpc::ServerWriter< ::routeguide::v1::Feature>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFeatures(::grpc::ServerContext* context, ::routeguide::v1::Rectangle* request, ::grpc::ServerAsyncWriter< ::routeguide::v1::Feature>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordRoute() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routeguide::v1::Point>* /*reader*/, ::routeguide::v1::RouteSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordRoute(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::routeguide::v1::RouteSummary, ::routeguide::v1::Point>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RouteChat() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRouteChat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetFeature<WithAsyncMethod_UpdateFeature<WithAsyncMethod_ListFeatures<WithAsyncMethod_RecordRoute<WithAsyncMethod_RouteChat<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFeature() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response) { return this->GetFeature(context, request, response); }));}
    void SetMessageAllocatorFor_GetFeature(
        ::grpc::experimental::MessageAllocator< ::routeguide::v1::Point, ::routeguide::v1::Feature>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetFeature(::grpc::experimental::CallbackServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateFeature() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response) { return this->UpdateFeature(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateFeature(
        ::grpc::experimental::MessageAllocator< ::routeguide::v1::Point, ::routeguide::v1::Feature>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateFeature(::grpc::experimental::CallbackServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListFeatures() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::routeguide::v1::Rectangle, ::routeguide::v1::Feature>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::routeguide::v1::Rectangle* request) { return this->ListFeatures(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Rectangle* /*request*/, ::grpc::ServerWriter< ::routeguide::v1::Feature>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::routeguide::v1::Feature>* ListFeatures(::grpc::experimental::CallbackServerContext* /*context*/, const ::routeguide::v1::Rectangle* /*request*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecordRoute() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::routeguide::v1::Point, ::routeguide::v1::RouteSummary>(
          [this](::grpc::experimental::CallbackServerContext* context, ::routeguide::v1::RouteSummary* response) { return this->RecordRoute(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routeguide::v1::Point>* /*reader*/, ::routeguide::v1::RouteSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::routeguide::v1::Point>* RecordRoute(::grpc::experimental::CallbackServerContext* /*context*/, ::routeguide::v1::RouteSummary* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RouteChat() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackBidiHandler< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>(
          [this](::grpc::experimental::CallbackServerContext* context) { return this->RouteChat(context); }));
    }
    ~ExperimentalWithCallbackMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* RouteChat(::grpc::experimental::CallbackServerContext* /*context*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_GetFeature<ExperimentalWithCallbackMethod_UpdateFeature<ExperimentalWithCallbackMethod_ListFeatures<ExperimentalWithCallbackMethod_RecordRoute<ExperimentalWithCallbackMethod_RouteChat<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFeature() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateFeature() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListFeatures() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Rectangle* /*request*/, ::grpc::ServerWriter< ::routeguide::v1::Feature>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordRoute() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routeguide::v1::Point>* /*reader*/, ::routeguide::v1::RouteSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RouteChat() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFeature() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateFeature() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListFeatures() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Rectangle* /*request*/, ::grpc::ServerWriter< ::routeguide::v1::Feature>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFeatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordRoute() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routeguide::v1::Point>* /*reader*/, ::routeguide::v1::RouteSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordRoute(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RouteChat() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRouteChat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFeature() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFeature(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetFeature(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateFeature() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateFeature(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateFeature(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListFeatures() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ListFeatures(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Rectangle* /*request*/, ::grpc::ServerWriter< ::routeguide::v1::Feature>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ListFeatures(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecordRoute() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->RecordRoute(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::routeguide::v1::Point>* /*reader*/, ::routeguide::v1::RouteSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* RecordRoute(::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RouteChat() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context) { return this->RouteChat(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::routeguide::v1::RouteNote, ::routeguide::v1::RouteNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* RouteChat(::grpc::experimental::CallbackServerContext* /*context*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFeature() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>(std::bind(&WithStreamedUnaryMethod_GetFeature<BaseClass>::StreamedGetFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routeguide::v1::Point,::routeguide::v1::Feature>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateFeature() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>(std::bind(&WithStreamedUnaryMethod_UpdateFeature<BaseClass>::StreamedUpdateFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routeguide::v1::Point,::routeguide::v1::Feature>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFeature<WithStreamedUnaryMethod_UpdateFeature<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListFeatures() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::routeguide::v1::Rectangle, ::routeguide::v1::Feature>(std::bind(&WithSplitStreamingMethod_ListFeatures<BaseClass>::StreamedListFeatures, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFeatures(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Rectangle* /*request*/, ::grpc::ServerWriter< ::routeguide::v1::Feature>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListFeatures(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::routeguide::v1::Rectangle,::routeguide::v1::Feature>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListFeatures<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetFeature<WithStreamedUnaryMethod_UpdateFeature<WithSplitStreamingMethod_ListFeatures<Service > > > StreamedService;
};

// Interface exported by the server.
class PublicRouteGuide final {
 public:
  static constexpr char const* service_full_name() {
    return "routeguide.v1.PublicRouteGuide";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::routeguide::v1::Feature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>> AsyncGetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>>(AsyncGetFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>> PrepareAsyncGetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>>(PrepareAsyncGetFeatureRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // A simple RPC.
      //
      // Obtains the feature at a given position.
      //
      // A feature with an empty name is returned if there's no feature at the given
      // position.
      virtual void GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>* AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::v1::Feature>* PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::routeguide::v1::Feature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>> AsyncGetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>>(AsyncGetFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>> PrepareAsyncGetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>>(PrepareAsyncGetFeatureRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) override;
      void GetFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, std::function<void(::grpc::Status)>) override;
      void GetFeature(::grpc::ClientContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::v1::Feature* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>* AsyncGetFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::v1::Feature>* PrepareAsyncGetFeatureRaw(::grpc::ClientContext* context, const ::routeguide::v1::Point& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetFeature_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetFeature(::grpc::ServerContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFeature() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFeature(::grpc::ServerContext* context, ::routeguide::v1::Point* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::v1::Feature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetFeature<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFeature() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::routeguide::v1::Point* request, ::routeguide::v1::Feature* response) { return this->GetFeature(context, request, response); }));}
    void SetMessageAllocatorFor_GetFeature(
        ::grpc::experimental::MessageAllocator< ::routeguide::v1::Point, ::routeguide::v1::Feature>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetFeature(::grpc::experimental::CallbackServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_GetFeature<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFeature() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFeature() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFeature() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFeature(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetFeature(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFeature() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::routeguide::v1::Point, ::routeguide::v1::Feature>(std::bind(&WithStreamedUnaryMethod_GetFeature<BaseClass>::StreamedGetFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFeature(::grpc::ServerContext* /*context*/, const ::routeguide::v1::Point* /*request*/, ::routeguide::v1::Feature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routeguide::v1::Point,::routeguide::v1::Feature>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFeature<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetFeature<Service > StreamedService;
};

}  // namespace v1
}  // namespace routeguide


#endif  // GRPC_routeguide_2fv1_2froute_5fguide_2eproto__INCLUDED

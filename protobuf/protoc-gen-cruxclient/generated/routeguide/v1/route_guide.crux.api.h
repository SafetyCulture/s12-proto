// Generated by the CRUX Engine C++ plugin.
// If you make any local change, they will be lost.
// source: routeguide/v1/route_guide.proto
#pragma once

#include <vector>
#include <string>
#include <memory>

#include <google/protobuf/any.pb.h>
#include "routeguide/v1/route_guide.grpc.pb.h"
#include "crux_engine_client_support.h"

namespace routeguide::v1 {

namespace RouteGuideNS {
const char kServiceName[] = "routeguide_v1_RouteGuide";
class GetFeatureAPI {
 public:
  explicit GetFeatureAPI(const std::shared_ptr<crux::engine::ChannelProvider>& provider);
  static std::string Name();
  static std::string ServiceName();
  static std::string MethodName();
  grpc::Status Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request,
    routeguide::v1::Feature* response) const;
  // server streaming
  std::unique_ptr<grpc::ClientReaderInterface<routeguide::v1::Feature>> Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request) const;
 private:
  std::unique_ptr<RouteGuide::StubInterface> mStub;
};

class UpdateFeatureAPI {
 public:
  explicit UpdateFeatureAPI(const std::shared_ptr<crux::engine::ChannelProvider>& provider);
  static std::string Name();
  static std::string ServiceName();
  static std::string MethodName();
  grpc::Status Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request,
    routeguide::v1::Feature* response) const;
  // server streaming
  std::unique_ptr<grpc::ClientReaderInterface<routeguide::v1::Feature>> Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request) const;
 private:
  std::unique_ptr<RouteGuide::StubInterface> mStub;
};

class ListFeaturesAPI {
 public:
  explicit ListFeaturesAPI(const std::shared_ptr<crux::engine::ChannelProvider>& provider);
  static std::string Name();
  static std::string ServiceName();
  static std::string MethodName();
  grpc::Status Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Rectangle& request,
    routeguide::v1::Feature* response) const;
  // server streaming
  std::unique_ptr<grpc::ClientReaderInterface<routeguide::v1::Feature>> Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Rectangle& request) const;
 private:
  std::unique_ptr<RouteGuide::StubInterface> mStub;
};

grpc::Status Invoke(const std::shared_ptr<crux::engine::ChannelProvider>& provider, grpc::ClientContext* context, const google::protobuf::Any& request_data, const std::string& method_name);
}  // namespace RouteGuideNS

namespace PublicRouteGuideNS {
const char kServiceName[] = "routeguide_v1_PublicRouteGuide";
class GetFeatureAPI {
 public:
  explicit GetFeatureAPI(const std::shared_ptr<crux::engine::ChannelProvider>& provider);
  static std::string Name();
  static std::string ServiceName();
  static std::string MethodName();
  grpc::Status Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request,
    routeguide::v1::Feature* response) const;
  // server streaming
  std::unique_ptr<grpc::ClientReaderInterface<routeguide::v1::Feature>> Execute(
    grpc::ClientContext* context,
    const routeguide::v1::Point& request) const;
 private:
  std::unique_ptr<PublicRouteGuide::StubInterface> mStub;
};

grpc::Status Invoke(const std::shared_ptr<crux::engine::ChannelProvider>& provider, grpc::ClientContext* context, const google::protobuf::Any& request_data, const std::string& method_name);
}  // namespace PublicRouteGuideNS

}  // namespace routeguide::v1


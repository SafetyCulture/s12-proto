// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routeguide/v1/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_routeguide_2fv1_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_routeguide_2fv1_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_routeguide_2fv1_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_routeguide_2fv1_2fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_routeguide_2fv1_2fmessage_2eproto;
namespace routeguide {
namespace v1 {
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class RouteNote;
class RouteNoteDefaultTypeInternal;
extern RouteNoteDefaultTypeInternal _RouteNote_default_instance_;
class RouteSummary;
class RouteSummaryDefaultTypeInternal;
extern RouteSummaryDefaultTypeInternal _RouteSummary_default_instance_;
class RouteSummary_Details;
class RouteSummary_DetailsDefaultTypeInternal;
extern RouteSummary_DetailsDefaultTypeInternal _RouteSummary_Details_default_instance_;
class RouteSummary_Details_MoreDetails;
class RouteSummary_Details_MoreDetailsDefaultTypeInternal;
extern RouteSummary_Details_MoreDetailsDefaultTypeInternal _RouteSummary_Details_MoreDetails_default_instance_;
}  // namespace v1
}  // namespace routeguide
PROTOBUF_NAMESPACE_OPEN
template<> ::routeguide::v1::Feature* Arena::CreateMaybeMessage<::routeguide::v1::Feature>(Arena*);
template<> ::routeguide::v1::Point* Arena::CreateMaybeMessage<::routeguide::v1::Point>(Arena*);
template<> ::routeguide::v1::Rectangle* Arena::CreateMaybeMessage<::routeguide::v1::Rectangle>(Arena*);
template<> ::routeguide::v1::RouteNote* Arena::CreateMaybeMessage<::routeguide::v1::RouteNote>(Arena*);
template<> ::routeguide::v1::RouteSummary* Arena::CreateMaybeMessage<::routeguide::v1::RouteSummary>(Arena*);
template<> ::routeguide::v1::RouteSummary_Details* Arena::CreateMaybeMessage<::routeguide::v1::RouteSummary_Details>(Arena*);
template<> ::routeguide::v1::RouteSummary_Details_MoreDetails* Arena::CreateMaybeMessage<::routeguide::v1::RouteSummary_Details_MoreDetails>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace routeguide {
namespace v1 {

// ===================================================================

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routeguide_2fv1_2fmessage_2eproto);
    return ::descriptor_table_routeguide_2fv1_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // int32 latitude = 1;
  void clear_latitude();
  ::PROTOBUF_NAMESPACE_ID::int32 latitude() const;
  void set_latitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latitude() const;
  void _internal_set_latitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 longitude = 2;
  void clear_longitude();
  ::PROTOBUF_NAMESPACE_ID::int32 longitude() const;
  void set_longitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_longitude() const;
  void _internal_set_longitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Rectangle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(nullptr);
  }

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.Rectangle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routeguide_2fv1_2fmessage_2eproto);
    return ::descriptor_table_routeguide_2fv1_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoFieldNumber = 1,
    kHiFieldNumber = 2,
  };
  // .routeguide.v1.Point lo = 1;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  const ::routeguide::v1::Point& lo() const;
  ::routeguide::v1::Point* release_lo();
  ::routeguide::v1::Point* mutable_lo();
  void set_allocated_lo(::routeguide::v1::Point* lo);
  private:
  const ::routeguide::v1::Point& _internal_lo() const;
  ::routeguide::v1::Point* _internal_mutable_lo();
  public:

  // .routeguide.v1.Point hi = 2;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::routeguide::v1::Point& hi() const;
  ::routeguide::v1::Point* release_hi();
  ::routeguide::v1::Point* mutable_hi();
  void set_allocated_hi(::routeguide::v1::Point* hi);
  private:
  const ::routeguide::v1::Point& _internal_hi() const;
  ::routeguide::v1::Point* _internal_mutable_hi();
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.Rectangle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::routeguide::v1::Point* lo_;
  ::routeguide::v1::Point* hi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Feature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const final {
    return CreateMaybeMessage<Feature>(nullptr);
  }

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.Feature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routeguide_2fv1_2fmessage_2eproto);
    return ::descriptor_table_routeguide_2fv1_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .routeguide.v1.Point location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::routeguide::v1::Point& location() const;
  ::routeguide::v1::Point* release_location();
  ::routeguide::v1::Point* mutable_location();
  void set_allocated_location(::routeguide::v1::Point* location);
  private:
  const ::routeguide::v1::Point& _internal_location() const;
  ::routeguide::v1::Point* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.Feature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::routeguide::v1::Point* location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RouteNote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.RouteNote) */ {
 public:
  RouteNote();
  virtual ~RouteNote();

  RouteNote(const RouteNote& from);
  RouteNote(RouteNote&& from) noexcept
    : RouteNote() {
    *this = ::std::move(from);
  }

  inline RouteNote& operator=(const RouteNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteNote& operator=(RouteNote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteNote* internal_default_instance() {
    return reinterpret_cast<const RouteNote*>(
               &_RouteNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RouteNote& a, RouteNote& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteNote* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteNote* New() const final {
    return CreateMaybeMessage<RouteNote>(nullptr);
  }

  RouteNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteNote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteNote& from);
  void MergeFrom(const RouteNote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteNote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.RouteNote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routeguide_2fv1_2fmessage_2eproto);
    return ::descriptor_table_routeguide_2fv1_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kLocationFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .routeguide.v1.Point location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::routeguide::v1::Point& location() const;
  ::routeguide::v1::Point* release_location();
  ::routeguide::v1::Point* mutable_location();
  void set_allocated_location(::routeguide::v1::Point* location);
  private:
  const ::routeguide::v1::Point& _internal_location() const;
  ::routeguide::v1::Point* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.RouteNote)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::routeguide::v1::Point* location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RouteSummary_Details_MoreDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.RouteSummary.Details.MoreDetails) */ {
 public:
  RouteSummary_Details_MoreDetails();
  virtual ~RouteSummary_Details_MoreDetails();

  RouteSummary_Details_MoreDetails(const RouteSummary_Details_MoreDetails& from);
  RouteSummary_Details_MoreDetails(RouteSummary_Details_MoreDetails&& from) noexcept
    : RouteSummary_Details_MoreDetails() {
    *this = ::std::move(from);
  }

  inline RouteSummary_Details_MoreDetails& operator=(const RouteSummary_Details_MoreDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSummary_Details_MoreDetails& operator=(RouteSummary_Details_MoreDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteSummary_Details_MoreDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSummary_Details_MoreDetails* internal_default_instance() {
    return reinterpret_cast<const RouteSummary_Details_MoreDetails*>(
               &_RouteSummary_Details_MoreDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteSummary_Details_MoreDetails& a, RouteSummary_Details_MoreDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSummary_Details_MoreDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteSummary_Details_MoreDetails* New() const final {
    return CreateMaybeMessage<RouteSummary_Details_MoreDetails>(nullptr);
  }

  RouteSummary_Details_MoreDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteSummary_Details_MoreDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteSummary_Details_MoreDetails& from);
  void MergeFrom(const RouteSummary_Details_MoreDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSummary_Details_MoreDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.RouteSummary.Details.MoreDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routeguide_2fv1_2fmessage_2eproto);
    return ::descriptor_table_routeguide_2fv1_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
  };
  // string body = 1;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.RouteSummary.Details.MoreDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RouteSummary_Details :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.RouteSummary.Details) */ {
 public:
  RouteSummary_Details();
  virtual ~RouteSummary_Details();

  RouteSummary_Details(const RouteSummary_Details& from);
  RouteSummary_Details(RouteSummary_Details&& from) noexcept
    : RouteSummary_Details() {
    *this = ::std::move(from);
  }

  inline RouteSummary_Details& operator=(const RouteSummary_Details& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSummary_Details& operator=(RouteSummary_Details&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteSummary_Details& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSummary_Details* internal_default_instance() {
    return reinterpret_cast<const RouteSummary_Details*>(
               &_RouteSummary_Details_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RouteSummary_Details& a, RouteSummary_Details& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSummary_Details* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteSummary_Details* New() const final {
    return CreateMaybeMessage<RouteSummary_Details>(nullptr);
  }

  RouteSummary_Details* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteSummary_Details>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteSummary_Details& from);
  void MergeFrom(const RouteSummary_Details& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSummary_Details* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.RouteSummary.Details";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routeguide_2fv1_2fmessage_2eproto);
    return ::descriptor_table_routeguide_2fv1_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RouteSummary_Details_MoreDetails MoreDetails;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBodyFieldNumber = 2,
    kDetailsFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .routeguide.v1.RouteSummary.Details.MoreDetails details = 3;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::routeguide::v1::RouteSummary_Details_MoreDetails& details() const;
  ::routeguide::v1::RouteSummary_Details_MoreDetails* release_details();
  ::routeguide::v1::RouteSummary_Details_MoreDetails* mutable_details();
  void set_allocated_details(::routeguide::v1::RouteSummary_Details_MoreDetails* details);
  private:
  const ::routeguide::v1::RouteSummary_Details_MoreDetails& _internal_details() const;
  ::routeguide::v1::RouteSummary_Details_MoreDetails* _internal_mutable_details();
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.RouteSummary.Details)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::routeguide::v1::RouteSummary_Details_MoreDetails* details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RouteSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.RouteSummary) */ {
 public:
  RouteSummary();
  virtual ~RouteSummary();

  RouteSummary(const RouteSummary& from);
  RouteSummary(RouteSummary&& from) noexcept
    : RouteSummary() {
    *this = ::std::move(from);
  }

  inline RouteSummary& operator=(const RouteSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSummary& operator=(RouteSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSummary* internal_default_instance() {
    return reinterpret_cast<const RouteSummary*>(
               &_RouteSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RouteSummary& a, RouteSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteSummary* New() const final {
    return CreateMaybeMessage<RouteSummary>(nullptr);
  }

  RouteSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteSummary& from);
  void MergeFrom(const RouteSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.RouteSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_routeguide_2fv1_2fmessage_2eproto);
    return ::descriptor_table_routeguide_2fv1_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RouteSummary_Details Details;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 5,
    kPointCountFieldNumber = 1,
    kFeatureCountFieldNumber = 2,
    kDistanceFieldNumber = 3,
    kElapsedTimeFieldNumber = 4,
  };
  // .routeguide.v1.RouteSummary.Details details = 5;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::routeguide::v1::RouteSummary_Details& details() const;
  ::routeguide::v1::RouteSummary_Details* release_details();
  ::routeguide::v1::RouteSummary_Details* mutable_details();
  void set_allocated_details(::routeguide::v1::RouteSummary_Details* details);
  private:
  const ::routeguide::v1::RouteSummary_Details& _internal_details() const;
  ::routeguide::v1::RouteSummary_Details* _internal_mutable_details();
  public:

  // int32 point_count = 1;
  void clear_point_count();
  ::PROTOBUF_NAMESPACE_ID::int32 point_count() const;
  void set_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point_count() const;
  void _internal_set_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 feature_count = 2;
  void clear_feature_count();
  ::PROTOBUF_NAMESPACE_ID::int32 feature_count() const;
  void set_feature_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_feature_count() const;
  void _internal_set_feature_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 distance = 3;
  void clear_distance();
  ::PROTOBUF_NAMESPACE_ID::int32 distance() const;
  void set_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distance() const;
  void _internal_set_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 elapsed_time = 4;
  void clear_elapsed_time();
  ::PROTOBUF_NAMESPACE_ID::int32 elapsed_time() const;
  void set_elapsed_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_elapsed_time() const;
  void _internal_set_elapsed_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.RouteSummary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::routeguide::v1::RouteSummary_Details* details_;
  ::PROTOBUF_NAMESPACE_ID::int32 point_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 feature_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 elapsed_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int32 latitude = 1;
inline void Point::clear_latitude() {
  latitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_latitude() const {
  return latitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::latitude() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Point.latitude)
  return _internal_latitude();
}
inline void Point::_internal_set_latitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latitude_ = value;
}
inline void Point::set_latitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.Point.latitude)
}

// int32 longitude = 2;
inline void Point::clear_longitude() {
  longitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_longitude() const {
  return longitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::longitude() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Point.longitude)
  return _internal_longitude();
}
inline void Point::_internal_set_longitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  longitude_ = value;
}
inline void Point::set_longitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.Point.longitude)
}

// -------------------------------------------------------------------

// Rectangle

// .routeguide.v1.Point lo = 1;
inline bool Rectangle::_internal_has_lo() const {
  return this != internal_default_instance() && lo_ != nullptr;
}
inline bool Rectangle::has_lo() const {
  return _internal_has_lo();
}
inline void Rectangle::clear_lo() {
  if (GetArenaNoVirtual() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
}
inline const ::routeguide::v1::Point& Rectangle::_internal_lo() const {
  const ::routeguide::v1::Point* p = lo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routeguide::v1::Point*>(
      &::routeguide::v1::_Point_default_instance_);
}
inline const ::routeguide::v1::Point& Rectangle::lo() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Rectangle.lo)
  return _internal_lo();
}
inline ::routeguide::v1::Point* Rectangle::release_lo() {
  // @@protoc_insertion_point(field_release:routeguide.v1.Rectangle.lo)
  
  ::routeguide::v1::Point* temp = lo_;
  lo_ = nullptr;
  return temp;
}
inline ::routeguide::v1::Point* Rectangle::_internal_mutable_lo() {
  
  if (lo_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::Point>(GetArenaNoVirtual());
    lo_ = p;
  }
  return lo_;
}
inline ::routeguide::v1::Point* Rectangle::mutable_lo() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.Rectangle.lo)
  return _internal_mutable_lo();
}
inline void Rectangle::set_allocated_lo(::routeguide::v1::Point* lo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lo_;
  }
  if (lo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lo, submessage_arena);
    }
    
  } else {
    
  }
  lo_ = lo;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.Rectangle.lo)
}

// .routeguide.v1.Point hi = 2;
inline bool Rectangle::_internal_has_hi() const {
  return this != internal_default_instance() && hi_ != nullptr;
}
inline bool Rectangle::has_hi() const {
  return _internal_has_hi();
}
inline void Rectangle::clear_hi() {
  if (GetArenaNoVirtual() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
}
inline const ::routeguide::v1::Point& Rectangle::_internal_hi() const {
  const ::routeguide::v1::Point* p = hi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routeguide::v1::Point*>(
      &::routeguide::v1::_Point_default_instance_);
}
inline const ::routeguide::v1::Point& Rectangle::hi() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Rectangle.hi)
  return _internal_hi();
}
inline ::routeguide::v1::Point* Rectangle::release_hi() {
  // @@protoc_insertion_point(field_release:routeguide.v1.Rectangle.hi)
  
  ::routeguide::v1::Point* temp = hi_;
  hi_ = nullptr;
  return temp;
}
inline ::routeguide::v1::Point* Rectangle::_internal_mutable_hi() {
  
  if (hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::Point>(GetArenaNoVirtual());
    hi_ = p;
  }
  return hi_;
}
inline ::routeguide::v1::Point* Rectangle::mutable_hi() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.Rectangle.hi)
  return _internal_mutable_hi();
}
inline void Rectangle::set_allocated_hi(::routeguide::v1::Point* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.Rectangle.hi)
}

// -------------------------------------------------------------------

// Feature

// string name = 1;
inline void Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Feature.name)
  return _internal_name();
}
inline void Feature::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.Feature.name)
}
inline std::string* Feature::mutable_name() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.Feature.name)
  return _internal_mutable_name();
}
inline const std::string& Feature::_internal_name() const {
  return name_.GetNoArena();
}
inline void Feature::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Feature::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.v1.Feature.name)
}
inline void Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.v1.Feature.name)
}
inline void Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.v1.Feature.name)
}
inline std::string* Feature::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:routeguide.v1.Feature.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.Feature.name)
}

// .routeguide.v1.Point location = 2;
inline bool Feature::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Feature::has_location() const {
  return _internal_has_location();
}
inline void Feature::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::routeguide::v1::Point& Feature::_internal_location() const {
  const ::routeguide::v1::Point* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routeguide::v1::Point*>(
      &::routeguide::v1::_Point_default_instance_);
}
inline const ::routeguide::v1::Point& Feature::location() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Feature.location)
  return _internal_location();
}
inline ::routeguide::v1::Point* Feature::release_location() {
  // @@protoc_insertion_point(field_release:routeguide.v1.Feature.location)
  
  ::routeguide::v1::Point* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::routeguide::v1::Point* Feature::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::Point>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::routeguide::v1::Point* Feature::mutable_location() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.Feature.location)
  return _internal_mutable_location();
}
inline void Feature::set_allocated_location(::routeguide::v1::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.Feature.location)
}

// -------------------------------------------------------------------

// RouteNote

// .routeguide.v1.Point location = 1;
inline bool RouteNote::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool RouteNote::has_location() const {
  return _internal_has_location();
}
inline void RouteNote::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::routeguide::v1::Point& RouteNote::_internal_location() const {
  const ::routeguide::v1::Point* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routeguide::v1::Point*>(
      &::routeguide::v1::_Point_default_instance_);
}
inline const ::routeguide::v1::Point& RouteNote::location() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteNote.location)
  return _internal_location();
}
inline ::routeguide::v1::Point* RouteNote::release_location() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteNote.location)
  
  ::routeguide::v1::Point* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::routeguide::v1::Point* RouteNote::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::Point>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::routeguide::v1::Point* RouteNote::mutable_location() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteNote.location)
  return _internal_mutable_location();
}
inline void RouteNote::set_allocated_location(::routeguide::v1::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteNote.location)
}

// string message = 2;
inline void RouteNote::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteNote::message() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteNote.message)
  return _internal_message();
}
inline void RouteNote::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteNote.message)
}
inline std::string* RouteNote::mutable_message() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteNote.message)
  return _internal_mutable_message();
}
inline const std::string& RouteNote::_internal_message() const {
  return message_.GetNoArena();
}
inline void RouteNote::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouteNote::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.v1.RouteNote.message)
}
inline void RouteNote::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.v1.RouteNote.message)
}
inline void RouteNote::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.v1.RouteNote.message)
}
inline std::string* RouteNote::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteNote::release_message() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteNote.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteNote::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteNote.message)
}

// -------------------------------------------------------------------

// RouteSummary_Details_MoreDetails

// string body = 1;
inline void RouteSummary_Details_MoreDetails::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteSummary_Details_MoreDetails::body() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.Details.MoreDetails.body)
  return _internal_body();
}
inline void RouteSummary_Details_MoreDetails::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.Details.MoreDetails.body)
}
inline std::string* RouteSummary_Details_MoreDetails::mutable_body() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.Details.MoreDetails.body)
  return _internal_mutable_body();
}
inline const std::string& RouteSummary_Details_MoreDetails::_internal_body() const {
  return body_.GetNoArena();
}
inline void RouteSummary_Details_MoreDetails::_internal_set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouteSummary_Details_MoreDetails::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.v1.RouteSummary.Details.MoreDetails.body)
}
inline void RouteSummary_Details_MoreDetails::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.v1.RouteSummary.Details.MoreDetails.body)
}
inline void RouteSummary_Details_MoreDetails::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.v1.RouteSummary.Details.MoreDetails.body)
}
inline std::string* RouteSummary_Details_MoreDetails::_internal_mutable_body() {
  
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteSummary_Details_MoreDetails::release_body() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.Details.MoreDetails.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteSummary_Details_MoreDetails::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.Details.MoreDetails.body)
}

// -------------------------------------------------------------------

// RouteSummary_Details

// string id = 1;
inline void RouteSummary_Details::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteSummary_Details::id() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.Details.id)
  return _internal_id();
}
inline void RouteSummary_Details::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.Details.id)
}
inline std::string* RouteSummary_Details::mutable_id() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.Details.id)
  return _internal_mutable_id();
}
inline const std::string& RouteSummary_Details::_internal_id() const {
  return id_.GetNoArena();
}
inline void RouteSummary_Details::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouteSummary_Details::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.v1.RouteSummary.Details.id)
}
inline void RouteSummary_Details::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.v1.RouteSummary.Details.id)
}
inline void RouteSummary_Details::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.v1.RouteSummary.Details.id)
}
inline std::string* RouteSummary_Details::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteSummary_Details::release_id() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.Details.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteSummary_Details::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.Details.id)
}

// string body = 2;
inline void RouteSummary_Details::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteSummary_Details::body() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.Details.body)
  return _internal_body();
}
inline void RouteSummary_Details::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.Details.body)
}
inline std::string* RouteSummary_Details::mutable_body() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.Details.body)
  return _internal_mutable_body();
}
inline const std::string& RouteSummary_Details::_internal_body() const {
  return body_.GetNoArena();
}
inline void RouteSummary_Details::_internal_set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouteSummary_Details::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routeguide.v1.RouteSummary.Details.body)
}
inline void RouteSummary_Details::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routeguide.v1.RouteSummary.Details.body)
}
inline void RouteSummary_Details::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routeguide.v1.RouteSummary.Details.body)
}
inline std::string* RouteSummary_Details::_internal_mutable_body() {
  
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteSummary_Details::release_body() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.Details.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteSummary_Details::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.Details.body)
}

// .routeguide.v1.RouteSummary.Details.MoreDetails details = 3;
inline bool RouteSummary_Details::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool RouteSummary_Details::has_details() const {
  return _internal_has_details();
}
inline void RouteSummary_Details::clear_details() {
  if (GetArenaNoVirtual() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::routeguide::v1::RouteSummary_Details_MoreDetails& RouteSummary_Details::_internal_details() const {
  const ::routeguide::v1::RouteSummary_Details_MoreDetails* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routeguide::v1::RouteSummary_Details_MoreDetails*>(
      &::routeguide::v1::_RouteSummary_Details_MoreDetails_default_instance_);
}
inline const ::routeguide::v1::RouteSummary_Details_MoreDetails& RouteSummary_Details::details() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.Details.details)
  return _internal_details();
}
inline ::routeguide::v1::RouteSummary_Details_MoreDetails* RouteSummary_Details::release_details() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.Details.details)
  
  ::routeguide::v1::RouteSummary_Details_MoreDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::routeguide::v1::RouteSummary_Details_MoreDetails* RouteSummary_Details::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::RouteSummary_Details_MoreDetails>(GetArenaNoVirtual());
    details_ = p;
  }
  return details_;
}
inline ::routeguide::v1::RouteSummary_Details_MoreDetails* RouteSummary_Details::mutable_details() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.Details.details)
  return _internal_mutable_details();
}
inline void RouteSummary_Details::set_allocated_details(::routeguide::v1::RouteSummary_Details_MoreDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.Details.details)
}

// -------------------------------------------------------------------

// RouteSummary

// int32 point_count = 1;
inline void RouteSummary::clear_point_count() {
  point_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteSummary::_internal_point_count() const {
  return point_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteSummary::point_count() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.point_count)
  return _internal_point_count();
}
inline void RouteSummary::_internal_set_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  point_count_ = value;
}
inline void RouteSummary::set_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_point_count(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.point_count)
}

// int32 feature_count = 2;
inline void RouteSummary::clear_feature_count() {
  feature_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteSummary::_internal_feature_count() const {
  return feature_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteSummary::feature_count() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.feature_count)
  return _internal_feature_count();
}
inline void RouteSummary::_internal_set_feature_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  feature_count_ = value;
}
inline void RouteSummary::set_feature_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_feature_count(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.feature_count)
}

// int32 distance = 3;
inline void RouteSummary::clear_distance() {
  distance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteSummary::_internal_distance() const {
  return distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteSummary::distance() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.distance)
  return _internal_distance();
}
inline void RouteSummary::_internal_set_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  distance_ = value;
}
inline void RouteSummary::set_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.distance)
}

// int32 elapsed_time = 4;
inline void RouteSummary::clear_elapsed_time() {
  elapsed_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteSummary::_internal_elapsed_time() const {
  return elapsed_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteSummary::elapsed_time() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.elapsed_time)
  return _internal_elapsed_time();
}
inline void RouteSummary::_internal_set_elapsed_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  elapsed_time_ = value;
}
inline void RouteSummary::set_elapsed_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_elapsed_time(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.elapsed_time)
}

// .routeguide.v1.RouteSummary.Details details = 5;
inline bool RouteSummary::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool RouteSummary::has_details() const {
  return _internal_has_details();
}
inline void RouteSummary::clear_details() {
  if (GetArenaNoVirtual() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::routeguide::v1::RouteSummary_Details& RouteSummary::_internal_details() const {
  const ::routeguide::v1::RouteSummary_Details* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routeguide::v1::RouteSummary_Details*>(
      &::routeguide::v1::_RouteSummary_Details_default_instance_);
}
inline const ::routeguide::v1::RouteSummary_Details& RouteSummary::details() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.details)
  return _internal_details();
}
inline ::routeguide::v1::RouteSummary_Details* RouteSummary::release_details() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.details)
  
  ::routeguide::v1::RouteSummary_Details* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::routeguide::v1::RouteSummary_Details* RouteSummary::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::RouteSummary_Details>(GetArenaNoVirtual());
    details_ = p;
  }
  return details_;
}
inline ::routeguide::v1::RouteSummary_Details* RouteSummary::mutable_details() {
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.details)
  return _internal_mutable_details();
}
inline void RouteSummary::set_allocated_details(::routeguide::v1::RouteSummary_Details* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.details)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace routeguide

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_routeguide_2fv1_2fmessage_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routeguide/v1/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_routeguide_2fv1_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_routeguide_2fv1_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_routeguide_2fv1_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_routeguide_2fv1_2fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_routeguide_2fv1_2fmessage_2eproto;
namespace routeguide {
namespace v1 {
class Feature;
struct FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rectangle;
struct RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class RouteNote;
struct RouteNoteDefaultTypeInternal;
extern RouteNoteDefaultTypeInternal _RouteNote_default_instance_;
class RouteSummary;
struct RouteSummaryDefaultTypeInternal;
extern RouteSummaryDefaultTypeInternal _RouteSummary_default_instance_;
class RouteSummary_Details;
struct RouteSummary_DetailsDefaultTypeInternal;
extern RouteSummary_DetailsDefaultTypeInternal _RouteSummary_Details_default_instance_;
class RouteSummary_DetailsMapEntry_DoNotUse;
struct RouteSummary_DetailsMapEntry_DoNotUseDefaultTypeInternal;
extern RouteSummary_DetailsMapEntry_DoNotUseDefaultTypeInternal _RouteSummary_DetailsMapEntry_DoNotUse_default_instance_;
class RouteSummary_Details_MoreDetails;
struct RouteSummary_Details_MoreDetailsDefaultTypeInternal;
extern RouteSummary_Details_MoreDetailsDefaultTypeInternal _RouteSummary_Details_MoreDetails_default_instance_;
}  // namespace v1
}  // namespace routeguide
PROTOBUF_NAMESPACE_OPEN
template<> ::routeguide::v1::Feature* Arena::CreateMaybeMessage<::routeguide::v1::Feature>(Arena*);
template<> ::routeguide::v1::Point* Arena::CreateMaybeMessage<::routeguide::v1::Point>(Arena*);
template<> ::routeguide::v1::Rectangle* Arena::CreateMaybeMessage<::routeguide::v1::Rectangle>(Arena*);
template<> ::routeguide::v1::RouteNote* Arena::CreateMaybeMessage<::routeguide::v1::RouteNote>(Arena*);
template<> ::routeguide::v1::RouteSummary* Arena::CreateMaybeMessage<::routeguide::v1::RouteSummary>(Arena*);
template<> ::routeguide::v1::RouteSummary_Details* Arena::CreateMaybeMessage<::routeguide::v1::RouteSummary_Details>(Arena*);
template<> ::routeguide::v1::RouteSummary_DetailsMapEntry_DoNotUse* Arena::CreateMaybeMessage<::routeguide::v1::RouteSummary_DetailsMapEntry_DoNotUse>(Arena*);
template<> ::routeguide::v1::RouteSummary_Details_MoreDetails* Arena::CreateMaybeMessage<::routeguide::v1::RouteSummary_Details_MoreDetails>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace routeguide {
namespace v1 {

// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // int32 latitude = 1;
  void clear_latitude();
  int32_t latitude() const;
  void set_latitude(int32_t value);
  private:
  int32_t _internal_latitude() const;
  void _internal_set_latitude(int32_t value);
  public:

  // int32 longitude = 2;
  void clear_longitude();
  int32_t longitude() const;
  void set_longitude(int32_t value);
  private:
  int32_t _internal_longitude() const;
  void _internal_set_longitude(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t latitude_;
    int32_t longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Rectangle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.Rectangle) */ {
 public:
  inline Rectangle() : Rectangle(nullptr) {}
  ~Rectangle() override;
  explicit PROTOBUF_CONSTEXPR Rectangle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rectangle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rectangle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rectangle& from) {
    Rectangle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.Rectangle";
  }
  protected:
  explicit Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoFieldNumber = 1,
    kHiFieldNumber = 2,
  };
  // .routeguide.v1.Point lo = 1;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  const ::routeguide::v1::Point& lo() const;
  PROTOBUF_NODISCARD ::routeguide::v1::Point* release_lo();
  ::routeguide::v1::Point* mutable_lo();
  void set_allocated_lo(::routeguide::v1::Point* lo);
  private:
  const ::routeguide::v1::Point& _internal_lo() const;
  ::routeguide::v1::Point* _internal_mutable_lo();
  public:
  void unsafe_arena_set_allocated_lo(
      ::routeguide::v1::Point* lo);
  ::routeguide::v1::Point* unsafe_arena_release_lo();

  // .routeguide.v1.Point hi = 2;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::routeguide::v1::Point& hi() const;
  PROTOBUF_NODISCARD ::routeguide::v1::Point* release_hi();
  ::routeguide::v1::Point* mutable_hi();
  void set_allocated_hi(::routeguide::v1::Point* hi);
  private:
  const ::routeguide::v1::Point& _internal_hi() const;
  ::routeguide::v1::Point* _internal_mutable_hi();
  public:
  void unsafe_arena_set_allocated_hi(
      ::routeguide::v1::Point* hi);
  ::routeguide::v1::Point* unsafe_arena_release_hi();

  // @@protoc_insertion_point(class_scope:routeguide.v1.Rectangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::routeguide::v1::Point* lo_;
    ::routeguide::v1::Point* hi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class Feature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  ~Feature() override;
  explicit PROTOBUF_CONSTEXPR Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Feature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Feature& from) {
    Feature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.Feature";
  }
  protected:
  explicit Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .routeguide.v1.Point location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::routeguide::v1::Point& location() const;
  PROTOBUF_NODISCARD ::routeguide::v1::Point* release_location();
  ::routeguide::v1::Point* mutable_location();
  void set_allocated_location(::routeguide::v1::Point* location);
  private:
  const ::routeguide::v1::Point& _internal_location() const;
  ::routeguide::v1::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::routeguide::v1::Point* location);
  ::routeguide::v1::Point* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:routeguide.v1.Feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::routeguide::v1::Point* location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RouteNote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.RouteNote) */ {
 public:
  inline RouteNote() : RouteNote(nullptr) {}
  ~RouteNote() override;
  explicit PROTOBUF_CONSTEXPR RouteNote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteNote(const RouteNote& from);
  RouteNote(RouteNote&& from) noexcept
    : RouteNote() {
    *this = ::std::move(from);
  }

  inline RouteNote& operator=(const RouteNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteNote& operator=(RouteNote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteNote& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteNote* internal_default_instance() {
    return reinterpret_cast<const RouteNote*>(
               &_RouteNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RouteNote& a, RouteNote& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteNote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteNote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteNote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteNote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteNote& from) {
    RouteNote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteNote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.RouteNote";
  }
  protected:
  explicit RouteNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kLocationFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .routeguide.v1.Point location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::routeguide::v1::Point& location() const;
  PROTOBUF_NODISCARD ::routeguide::v1::Point* release_location();
  ::routeguide::v1::Point* mutable_location();
  void set_allocated_location(::routeguide::v1::Point* location);
  private:
  const ::routeguide::v1::Point& _internal_location() const;
  ::routeguide::v1::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::routeguide::v1::Point* location);
  ::routeguide::v1::Point* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:routeguide.v1.RouteNote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::routeguide::v1::Point* location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RouteSummary_Details_MoreDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.RouteSummary.Details.MoreDetails) */ {
 public:
  inline RouteSummary_Details_MoreDetails() : RouteSummary_Details_MoreDetails(nullptr) {}
  ~RouteSummary_Details_MoreDetails() override;
  explicit PROTOBUF_CONSTEXPR RouteSummary_Details_MoreDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteSummary_Details_MoreDetails(const RouteSummary_Details_MoreDetails& from);
  RouteSummary_Details_MoreDetails(RouteSummary_Details_MoreDetails&& from) noexcept
    : RouteSummary_Details_MoreDetails() {
    *this = ::std::move(from);
  }

  inline RouteSummary_Details_MoreDetails& operator=(const RouteSummary_Details_MoreDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSummary_Details_MoreDetails& operator=(RouteSummary_Details_MoreDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteSummary_Details_MoreDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteSummary_Details_MoreDetails* internal_default_instance() {
    return reinterpret_cast<const RouteSummary_Details_MoreDetails*>(
               &_RouteSummary_Details_MoreDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteSummary_Details_MoreDetails& a, RouteSummary_Details_MoreDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSummary_Details_MoreDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteSummary_Details_MoreDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteSummary_Details_MoreDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteSummary_Details_MoreDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteSummary_Details_MoreDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteSummary_Details_MoreDetails& from) {
    RouteSummary_Details_MoreDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSummary_Details_MoreDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.RouteSummary.Details.MoreDetails";
  }
  protected:
  explicit RouteSummary_Details_MoreDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
  };
  // string body = 1;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.RouteSummary.Details.MoreDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RouteSummary_Details final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.RouteSummary.Details) */ {
 public:
  inline RouteSummary_Details() : RouteSummary_Details(nullptr) {}
  ~RouteSummary_Details() override;
  explicit PROTOBUF_CONSTEXPR RouteSummary_Details(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteSummary_Details(const RouteSummary_Details& from);
  RouteSummary_Details(RouteSummary_Details&& from) noexcept
    : RouteSummary_Details() {
    *this = ::std::move(from);
  }

  inline RouteSummary_Details& operator=(const RouteSummary_Details& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSummary_Details& operator=(RouteSummary_Details&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteSummary_Details& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteSummary_Details* internal_default_instance() {
    return reinterpret_cast<const RouteSummary_Details*>(
               &_RouteSummary_Details_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RouteSummary_Details& a, RouteSummary_Details& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSummary_Details* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteSummary_Details* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteSummary_Details* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteSummary_Details>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteSummary_Details& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteSummary_Details& from) {
    RouteSummary_Details::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSummary_Details* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.RouteSummary.Details";
  }
  protected:
  explicit RouteSummary_Details(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RouteSummary_Details_MoreDetails MoreDetails;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBodyFieldNumber = 2,
    kDetailsFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .routeguide.v1.RouteSummary.Details.MoreDetails details = 3;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::routeguide::v1::RouteSummary_Details_MoreDetails& details() const;
  PROTOBUF_NODISCARD ::routeguide::v1::RouteSummary_Details_MoreDetails* release_details();
  ::routeguide::v1::RouteSummary_Details_MoreDetails* mutable_details();
  void set_allocated_details(::routeguide::v1::RouteSummary_Details_MoreDetails* details);
  private:
  const ::routeguide::v1::RouteSummary_Details_MoreDetails& _internal_details() const;
  ::routeguide::v1::RouteSummary_Details_MoreDetails* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::routeguide::v1::RouteSummary_Details_MoreDetails* details);
  ::routeguide::v1::RouteSummary_Details_MoreDetails* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:routeguide.v1.RouteSummary.Details)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::routeguide::v1::RouteSummary_Details_MoreDetails* details_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RouteSummary_DetailsMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RouteSummary_DetailsMapEntry_DoNotUse, 
    std::string, ::routeguide::v1::RouteSummary_Details,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RouteSummary_DetailsMapEntry_DoNotUse, 
    std::string, ::routeguide::v1::RouteSummary_Details,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RouteSummary_DetailsMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RouteSummary_DetailsMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RouteSummary_DetailsMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RouteSummary_DetailsMapEntry_DoNotUse& other);
  static const RouteSummary_DetailsMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RouteSummary_DetailsMapEntry_DoNotUse*>(&_RouteSummary_DetailsMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "routeguide.v1.RouteSummary.DetailsMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};

// -------------------------------------------------------------------

class RouteSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routeguide.v1.RouteSummary) */ {
 public:
  inline RouteSummary() : RouteSummary(nullptr) {}
  ~RouteSummary() override;
  explicit PROTOBUF_CONSTEXPR RouteSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteSummary(const RouteSummary& from);
  RouteSummary(RouteSummary&& from) noexcept
    : RouteSummary() {
    *this = ::std::move(from);
  }

  inline RouteSummary& operator=(const RouteSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSummary& operator=(RouteSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteSummary* internal_default_instance() {
    return reinterpret_cast<const RouteSummary*>(
               &_RouteSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RouteSummary& a, RouteSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteSummary& from) {
    RouteSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routeguide.v1.RouteSummary";
  }
  protected:
  explicit RouteSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RouteSummary_Details Details;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsMapFieldNumber = 6,
    kDetailsFieldNumber = 5,
    kPointCountFieldNumber = 1,
    kFeatureCountFieldNumber = 2,
    kDistanceFieldNumber = 3,
    kElapsedTimeFieldNumber = 4,
  };
  // map<string, .routeguide.v1.RouteSummary.Details> details_map = 6;
  int details_map_size() const;
  private:
  int _internal_details_map_size() const;
  public:
  void clear_details_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::routeguide::v1::RouteSummary_Details >&
      _internal_details_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::routeguide::v1::RouteSummary_Details >*
      _internal_mutable_details_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::routeguide::v1::RouteSummary_Details >&
      details_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::routeguide::v1::RouteSummary_Details >*
      mutable_details_map();

  // .routeguide.v1.RouteSummary.Details details = 5;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::routeguide::v1::RouteSummary_Details& details() const;
  PROTOBUF_NODISCARD ::routeguide::v1::RouteSummary_Details* release_details();
  ::routeguide::v1::RouteSummary_Details* mutable_details();
  void set_allocated_details(::routeguide::v1::RouteSummary_Details* details);
  private:
  const ::routeguide::v1::RouteSummary_Details& _internal_details() const;
  ::routeguide::v1::RouteSummary_Details* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::routeguide::v1::RouteSummary_Details* details);
  ::routeguide::v1::RouteSummary_Details* unsafe_arena_release_details();

  // int32 point_count = 1;
  void clear_point_count();
  int32_t point_count() const;
  void set_point_count(int32_t value);
  private:
  int32_t _internal_point_count() const;
  void _internal_set_point_count(int32_t value);
  public:

  // int32 feature_count = 2;
  void clear_feature_count();
  int32_t feature_count() const;
  void set_feature_count(int32_t value);
  private:
  int32_t _internal_feature_count() const;
  void _internal_set_feature_count(int32_t value);
  public:

  // int32 distance = 3;
  void clear_distance();
  int32_t distance() const;
  void set_distance(int32_t value);
  private:
  int32_t _internal_distance() const;
  void _internal_set_distance(int32_t value);
  public:

  // int32 elapsed_time = 4;
  void clear_elapsed_time();
  int32_t elapsed_time() const;
  void set_elapsed_time(int32_t value);
  private:
  int32_t _internal_elapsed_time() const;
  void _internal_set_elapsed_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:routeguide.v1.RouteSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RouteSummary_DetailsMapEntry_DoNotUse,
        std::string, ::routeguide::v1::RouteSummary_Details,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> details_map_;
    ::routeguide::v1::RouteSummary_Details* details_;
    int32_t point_count_;
    int32_t feature_count_;
    int32_t distance_;
    int32_t elapsed_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routeguide_2fv1_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int32 latitude = 1;
inline void Point::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline int32_t Point::_internal_latitude() const {
  return _impl_.latitude_;
}
inline int32_t Point::latitude() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Point.latitude)
  return _internal_latitude();
}
inline void Point::_internal_set_latitude(int32_t value) {
  
  _impl_.latitude_ = value;
}
inline void Point::set_latitude(int32_t value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.Point.latitude)
}

// int32 longitude = 2;
inline void Point::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline int32_t Point::_internal_longitude() const {
  return _impl_.longitude_;
}
inline int32_t Point::longitude() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Point.longitude)
  return _internal_longitude();
}
inline void Point::_internal_set_longitude(int32_t value) {
  
  _impl_.longitude_ = value;
}
inline void Point::set_longitude(int32_t value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.Point.longitude)
}

// -------------------------------------------------------------------

// Rectangle

// .routeguide.v1.Point lo = 1;
inline bool Rectangle::_internal_has_lo() const {
  return this != internal_default_instance() && _impl_.lo_ != nullptr;
}
inline bool Rectangle::has_lo() const {
  return _internal_has_lo();
}
inline void Rectangle::clear_lo() {
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
}
inline const ::routeguide::v1::Point& Rectangle::_internal_lo() const {
  const ::routeguide::v1::Point* p = _impl_.lo_;
  return p != nullptr ? *p : reinterpret_cast<const ::routeguide::v1::Point&>(
      ::routeguide::v1::_Point_default_instance_);
}
inline const ::routeguide::v1::Point& Rectangle::lo() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Rectangle.lo)
  return _internal_lo();
}
inline void Rectangle::unsafe_arena_set_allocated_lo(
    ::routeguide::v1::Point* lo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lo_);
  }
  _impl_.lo_ = lo;
  if (lo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:routeguide.v1.Rectangle.lo)
}
inline ::routeguide::v1::Point* Rectangle::release_lo() {
  
  ::routeguide::v1::Point* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::routeguide::v1::Point* Rectangle::unsafe_arena_release_lo() {
  // @@protoc_insertion_point(field_release:routeguide.v1.Rectangle.lo)
  
  ::routeguide::v1::Point* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
  return temp;
}
inline ::routeguide::v1::Point* Rectangle::_internal_mutable_lo() {
  
  if (_impl_.lo_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::Point>(GetArenaForAllocation());
    _impl_.lo_ = p;
  }
  return _impl_.lo_;
}
inline ::routeguide::v1::Point* Rectangle::mutable_lo() {
  ::routeguide::v1::Point* _msg = _internal_mutable_lo();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.Rectangle.lo)
  return _msg;
}
inline void Rectangle::set_allocated_lo(::routeguide::v1::Point* lo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lo_;
  }
  if (lo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lo);
    if (message_arena != submessage_arena) {
      lo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lo_ = lo;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.Rectangle.lo)
}

// .routeguide.v1.Point hi = 2;
inline bool Rectangle::_internal_has_hi() const {
  return this != internal_default_instance() && _impl_.hi_ != nullptr;
}
inline bool Rectangle::has_hi() const {
  return _internal_has_hi();
}
inline void Rectangle::clear_hi() {
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
}
inline const ::routeguide::v1::Point& Rectangle::_internal_hi() const {
  const ::routeguide::v1::Point* p = _impl_.hi_;
  return p != nullptr ? *p : reinterpret_cast<const ::routeguide::v1::Point&>(
      ::routeguide::v1::_Point_default_instance_);
}
inline const ::routeguide::v1::Point& Rectangle::hi() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Rectangle.hi)
  return _internal_hi();
}
inline void Rectangle::unsafe_arena_set_allocated_hi(
    ::routeguide::v1::Point* hi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hi_);
  }
  _impl_.hi_ = hi;
  if (hi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:routeguide.v1.Rectangle.hi)
}
inline ::routeguide::v1::Point* Rectangle::release_hi() {
  
  ::routeguide::v1::Point* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::routeguide::v1::Point* Rectangle::unsafe_arena_release_hi() {
  // @@protoc_insertion_point(field_release:routeguide.v1.Rectangle.hi)
  
  ::routeguide::v1::Point* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
  return temp;
}
inline ::routeguide::v1::Point* Rectangle::_internal_mutable_hi() {
  
  if (_impl_.hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::Point>(GetArenaForAllocation());
    _impl_.hi_ = p;
  }
  return _impl_.hi_;
}
inline ::routeguide::v1::Point* Rectangle::mutable_hi() {
  ::routeguide::v1::Point* _msg = _internal_mutable_hi();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.Rectangle.hi)
  return _msg;
}
inline void Rectangle::set_allocated_hi(::routeguide::v1::Point* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hi);
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.Rectangle.hi)
}

// -------------------------------------------------------------------

// Feature

// string name = 1;
inline void Feature::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Feature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Feature::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:routeguide.v1.Feature.name)
}
inline std::string* Feature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.Feature.name)
  return _s;
}
inline const std::string& Feature::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Feature::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Feature::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:routeguide.v1.Feature.name)
  return _impl_.name_.Release();
}
inline void Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.Feature.name)
}

// .routeguide.v1.Point location = 2;
inline bool Feature::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Feature::has_location() const {
  return _internal_has_location();
}
inline void Feature::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::routeguide::v1::Point& Feature::_internal_location() const {
  const ::routeguide::v1::Point* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::routeguide::v1::Point&>(
      ::routeguide::v1::_Point_default_instance_);
}
inline const ::routeguide::v1::Point& Feature::location() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.Feature.location)
  return _internal_location();
}
inline void Feature::unsafe_arena_set_allocated_location(
    ::routeguide::v1::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:routeguide.v1.Feature.location)
}
inline ::routeguide::v1::Point* Feature::release_location() {
  
  ::routeguide::v1::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::routeguide::v1::Point* Feature::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:routeguide.v1.Feature.location)
  
  ::routeguide::v1::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::routeguide::v1::Point* Feature::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::Point>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::routeguide::v1::Point* Feature::mutable_location() {
  ::routeguide::v1::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.Feature.location)
  return _msg;
}
inline void Feature::set_allocated_location(::routeguide::v1::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.Feature.location)
}

// -------------------------------------------------------------------

// RouteNote

// .routeguide.v1.Point location = 1;
inline bool RouteNote::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool RouteNote::has_location() const {
  return _internal_has_location();
}
inline void RouteNote::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::routeguide::v1::Point& RouteNote::_internal_location() const {
  const ::routeguide::v1::Point* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::routeguide::v1::Point&>(
      ::routeguide::v1::_Point_default_instance_);
}
inline const ::routeguide::v1::Point& RouteNote::location() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteNote.location)
  return _internal_location();
}
inline void RouteNote::unsafe_arena_set_allocated_location(
    ::routeguide::v1::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:routeguide.v1.RouteNote.location)
}
inline ::routeguide::v1::Point* RouteNote::release_location() {
  
  ::routeguide::v1::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::routeguide::v1::Point* RouteNote::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteNote.location)
  
  ::routeguide::v1::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::routeguide::v1::Point* RouteNote::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::Point>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::routeguide::v1::Point* RouteNote::mutable_location() {
  ::routeguide::v1::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteNote.location)
  return _msg;
}
inline void RouteNote::set_allocated_location(::routeguide::v1::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteNote.location)
}

// string message = 2;
inline void RouteNote::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RouteNote::message() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteNote.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteNote::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteNote.message)
}
inline std::string* RouteNote::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteNote.message)
  return _s;
}
inline const std::string& RouteNote::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RouteNote::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteNote::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteNote::release_message() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteNote.message)
  return _impl_.message_.Release();
}
inline void RouteNote::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteNote.message)
}

// -------------------------------------------------------------------

// RouteSummary_Details_MoreDetails

// string body = 1;
inline void RouteSummary_Details_MoreDetails::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& RouteSummary_Details_MoreDetails::body() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.Details.MoreDetails.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteSummary_Details_MoreDetails::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.Details.MoreDetails.body)
}
inline std::string* RouteSummary_Details_MoreDetails::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.Details.MoreDetails.body)
  return _s;
}
inline const std::string& RouteSummary_Details_MoreDetails::_internal_body() const {
  return _impl_.body_.Get();
}
inline void RouteSummary_Details_MoreDetails::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteSummary_Details_MoreDetails::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteSummary_Details_MoreDetails::release_body() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.Details.MoreDetails.body)
  return _impl_.body_.Release();
}
inline void RouteSummary_Details_MoreDetails::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.Details.MoreDetails.body)
}

// -------------------------------------------------------------------

// RouteSummary_Details

// string id = 1;
inline void RouteSummary_Details::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& RouteSummary_Details::id() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.Details.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteSummary_Details::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.Details.id)
}
inline std::string* RouteSummary_Details::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.Details.id)
  return _s;
}
inline const std::string& RouteSummary_Details::_internal_id() const {
  return _impl_.id_.Get();
}
inline void RouteSummary_Details::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteSummary_Details::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteSummary_Details::release_id() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.Details.id)
  return _impl_.id_.Release();
}
inline void RouteSummary_Details::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.Details.id)
}

// string body = 2;
inline void RouteSummary_Details::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& RouteSummary_Details::body() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.Details.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteSummary_Details::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.Details.body)
}
inline std::string* RouteSummary_Details::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.Details.body)
  return _s;
}
inline const std::string& RouteSummary_Details::_internal_body() const {
  return _impl_.body_.Get();
}
inline void RouteSummary_Details::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteSummary_Details::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteSummary_Details::release_body() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.Details.body)
  return _impl_.body_.Release();
}
inline void RouteSummary_Details::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.Details.body)
}

// .routeguide.v1.RouteSummary.Details.MoreDetails details = 3;
inline bool RouteSummary_Details::_internal_has_details() const {
  return this != internal_default_instance() && _impl_.details_ != nullptr;
}
inline bool RouteSummary_Details::has_details() const {
  return _internal_has_details();
}
inline void RouteSummary_Details::clear_details() {
  if (GetArenaForAllocation() == nullptr && _impl_.details_ != nullptr) {
    delete _impl_.details_;
  }
  _impl_.details_ = nullptr;
}
inline const ::routeguide::v1::RouteSummary_Details_MoreDetails& RouteSummary_Details::_internal_details() const {
  const ::routeguide::v1::RouteSummary_Details_MoreDetails* p = _impl_.details_;
  return p != nullptr ? *p : reinterpret_cast<const ::routeguide::v1::RouteSummary_Details_MoreDetails&>(
      ::routeguide::v1::_RouteSummary_Details_MoreDetails_default_instance_);
}
inline const ::routeguide::v1::RouteSummary_Details_MoreDetails& RouteSummary_Details::details() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.Details.details)
  return _internal_details();
}
inline void RouteSummary_Details::unsafe_arena_set_allocated_details(
    ::routeguide::v1::RouteSummary_Details_MoreDetails* details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.details_);
  }
  _impl_.details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:routeguide.v1.RouteSummary.Details.details)
}
inline ::routeguide::v1::RouteSummary_Details_MoreDetails* RouteSummary_Details::release_details() {
  
  ::routeguide::v1::RouteSummary_Details_MoreDetails* temp = _impl_.details_;
  _impl_.details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::routeguide::v1::RouteSummary_Details_MoreDetails* RouteSummary_Details::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.Details.details)
  
  ::routeguide::v1::RouteSummary_Details_MoreDetails* temp = _impl_.details_;
  _impl_.details_ = nullptr;
  return temp;
}
inline ::routeguide::v1::RouteSummary_Details_MoreDetails* RouteSummary_Details::_internal_mutable_details() {
  
  if (_impl_.details_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::RouteSummary_Details_MoreDetails>(GetArenaForAllocation());
    _impl_.details_ = p;
  }
  return _impl_.details_;
}
inline ::routeguide::v1::RouteSummary_Details_MoreDetails* RouteSummary_Details::mutable_details() {
  ::routeguide::v1::RouteSummary_Details_MoreDetails* _msg = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.Details.details)
  return _msg;
}
inline void RouteSummary_Details::set_allocated_details(::routeguide::v1::RouteSummary_Details_MoreDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.details_ = details;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.Details.details)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RouteSummary

// int32 point_count = 1;
inline void RouteSummary::clear_point_count() {
  _impl_.point_count_ = 0;
}
inline int32_t RouteSummary::_internal_point_count() const {
  return _impl_.point_count_;
}
inline int32_t RouteSummary::point_count() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.point_count)
  return _internal_point_count();
}
inline void RouteSummary::_internal_set_point_count(int32_t value) {
  
  _impl_.point_count_ = value;
}
inline void RouteSummary::set_point_count(int32_t value) {
  _internal_set_point_count(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.point_count)
}

// int32 feature_count = 2;
inline void RouteSummary::clear_feature_count() {
  _impl_.feature_count_ = 0;
}
inline int32_t RouteSummary::_internal_feature_count() const {
  return _impl_.feature_count_;
}
inline int32_t RouteSummary::feature_count() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.feature_count)
  return _internal_feature_count();
}
inline void RouteSummary::_internal_set_feature_count(int32_t value) {
  
  _impl_.feature_count_ = value;
}
inline void RouteSummary::set_feature_count(int32_t value) {
  _internal_set_feature_count(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.feature_count)
}

// int32 distance = 3;
inline void RouteSummary::clear_distance() {
  _impl_.distance_ = 0;
}
inline int32_t RouteSummary::_internal_distance() const {
  return _impl_.distance_;
}
inline int32_t RouteSummary::distance() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.distance)
  return _internal_distance();
}
inline void RouteSummary::_internal_set_distance(int32_t value) {
  
  _impl_.distance_ = value;
}
inline void RouteSummary::set_distance(int32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.distance)
}

// int32 elapsed_time = 4;
inline void RouteSummary::clear_elapsed_time() {
  _impl_.elapsed_time_ = 0;
}
inline int32_t RouteSummary::_internal_elapsed_time() const {
  return _impl_.elapsed_time_;
}
inline int32_t RouteSummary::elapsed_time() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.elapsed_time)
  return _internal_elapsed_time();
}
inline void RouteSummary::_internal_set_elapsed_time(int32_t value) {
  
  _impl_.elapsed_time_ = value;
}
inline void RouteSummary::set_elapsed_time(int32_t value) {
  _internal_set_elapsed_time(value);
  // @@protoc_insertion_point(field_set:routeguide.v1.RouteSummary.elapsed_time)
}

// .routeguide.v1.RouteSummary.Details details = 5;
inline bool RouteSummary::_internal_has_details() const {
  return this != internal_default_instance() && _impl_.details_ != nullptr;
}
inline bool RouteSummary::has_details() const {
  return _internal_has_details();
}
inline void RouteSummary::clear_details() {
  if (GetArenaForAllocation() == nullptr && _impl_.details_ != nullptr) {
    delete _impl_.details_;
  }
  _impl_.details_ = nullptr;
}
inline const ::routeguide::v1::RouteSummary_Details& RouteSummary::_internal_details() const {
  const ::routeguide::v1::RouteSummary_Details* p = _impl_.details_;
  return p != nullptr ? *p : reinterpret_cast<const ::routeguide::v1::RouteSummary_Details&>(
      ::routeguide::v1::_RouteSummary_Details_default_instance_);
}
inline const ::routeguide::v1::RouteSummary_Details& RouteSummary::details() const {
  // @@protoc_insertion_point(field_get:routeguide.v1.RouteSummary.details)
  return _internal_details();
}
inline void RouteSummary::unsafe_arena_set_allocated_details(
    ::routeguide::v1::RouteSummary_Details* details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.details_);
  }
  _impl_.details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:routeguide.v1.RouteSummary.details)
}
inline ::routeguide::v1::RouteSummary_Details* RouteSummary::release_details() {
  
  ::routeguide::v1::RouteSummary_Details* temp = _impl_.details_;
  _impl_.details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::routeguide::v1::RouteSummary_Details* RouteSummary::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:routeguide.v1.RouteSummary.details)
  
  ::routeguide::v1::RouteSummary_Details* temp = _impl_.details_;
  _impl_.details_ = nullptr;
  return temp;
}
inline ::routeguide::v1::RouteSummary_Details* RouteSummary::_internal_mutable_details() {
  
  if (_impl_.details_ == nullptr) {
    auto* p = CreateMaybeMessage<::routeguide::v1::RouteSummary_Details>(GetArenaForAllocation());
    _impl_.details_ = p;
  }
  return _impl_.details_;
}
inline ::routeguide::v1::RouteSummary_Details* RouteSummary::mutable_details() {
  ::routeguide::v1::RouteSummary_Details* _msg = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:routeguide.v1.RouteSummary.details)
  return _msg;
}
inline void RouteSummary::set_allocated_details(::routeguide::v1::RouteSummary_Details* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.details_ = details;
  // @@protoc_insertion_point(field_set_allocated:routeguide.v1.RouteSummary.details)
}

// map<string, .routeguide.v1.RouteSummary.Details> details_map = 6;
inline int RouteSummary::_internal_details_map_size() const {
  return _impl_.details_map_.size();
}
inline int RouteSummary::details_map_size() const {
  return _internal_details_map_size();
}
inline void RouteSummary::clear_details_map() {
  _impl_.details_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::routeguide::v1::RouteSummary_Details >&
RouteSummary::_internal_details_map() const {
  return _impl_.details_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::routeguide::v1::RouteSummary_Details >&
RouteSummary::details_map() const {
  // @@protoc_insertion_point(field_map:routeguide.v1.RouteSummary.details_map)
  return _internal_details_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::routeguide::v1::RouteSummary_Details >*
RouteSummary::_internal_mutable_details_map() {
  return _impl_.details_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::routeguide::v1::RouteSummary_Details >*
RouteSummary::mutable_details_map() {
  // @@protoc_insertion_point(field_mutable_map:routeguide.v1.RouteSummary.details_map)
  return _internal_mutable_details_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace routeguide

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_routeguide_2fv1_2fmessage_2eproto

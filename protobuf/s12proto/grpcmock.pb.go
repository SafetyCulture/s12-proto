// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: grpcmock.proto

package s12proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FieldMock struct {
	// Set the mocked field to a set string value. If repeated will choose one at
	// random.
	String_              []string `protobuf:"bytes,1,rep,name=string" json:"string,omitempty"`
	Word                 *bool    `protobuf:"varint,2,opt,name=word" json:"word,omitempty"`
	Words                *bool    `protobuf:"varint,3,opt,name=words" json:"words,omitempty"`
	Wordsn               *int32   `protobuf:"varint,4,opt,name=wordsn" json:"wordsn,omitempty"`
	Intn                 *int32   `protobuf:"varint,5,opt,name=intn" json:"intn,omitempty"`
	Fullname             *bool    `protobuf:"varint,6,opt,name=fullname" json:"fullname,omitempty"`
	Firstname            *bool    `protobuf:"varint,7,opt,name=firstname" json:"firstname,omitempty"`
	Lastname             *bool    `protobuf:"varint,8,opt,name=lastname" json:"lastname,omitempty"`
	Paragraph            *bool    `protobuf:"varint,9,opt,name=paragraph" json:"paragraph,omitempty"`
	Paragraphs           *bool    `protobuf:"varint,10,opt,name=paragraphs" json:"paragraphs,omitempty"`
	Paragraphsn          *int32   `protobuf:"varint,11,opt,name=paragraphsn" json:"paragraphsn,omitempty"`
	Uuid                 *bool    `protobuf:"varint,12,opt,name=uuid" json:"uuid,omitempty"`
	Email                *bool    `protobuf:"varint,13,opt,name=email" json:"email,omitempty"`
	Phone                *bool    `protobuf:"varint,14,opt,name=phone" json:"phone,omitempty"`
	Company              *bool    `protobuf:"varint,15,opt,name=company" json:"company,omitempty"`
	Brand                *bool    `protobuf:"varint,16,opt,name=brand" json:"brand,omitempty"`
	Product              *bool    `protobuf:"varint,17,opt,name=product" json:"product,omitempty"`
	Color                *bool    `protobuf:"varint,18,opt,name=color" json:"color,omitempty"`
	Hexcolor             *bool    `protobuf:"varint,19,opt,name=hexcolor" json:"hexcolor,omitempty"`
	Prefix               []string `protobuf:"bytes,20,rep,name=prefix" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldMock) Reset()         { *m = FieldMock{} }
func (m *FieldMock) String() string { return proto.CompactTextString(m) }
func (*FieldMock) ProtoMessage()    {}
func (*FieldMock) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c8c9b9c4c355de, []int{0}
}
func (m *FieldMock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldMock.Unmarshal(m, b)
}
func (m *FieldMock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldMock.Marshal(b, m, deterministic)
}
func (m *FieldMock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldMock.Merge(m, src)
}
func (m *FieldMock) XXX_Size() int {
	return xxx_messageInfo_FieldMock.Size(m)
}
func (m *FieldMock) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldMock.DiscardUnknown(m)
}

var xxx_messageInfo_FieldMock proto.InternalMessageInfo

func (m *FieldMock) GetString_() []string {
	if m != nil {
		return m.String_
	}
	return nil
}

func (m *FieldMock) GetWord() bool {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return false
}

func (m *FieldMock) GetWords() bool {
	if m != nil && m.Words != nil {
		return *m.Words
	}
	return false
}

func (m *FieldMock) GetWordsn() int32 {
	if m != nil && m.Wordsn != nil {
		return *m.Wordsn
	}
	return 0
}

func (m *FieldMock) GetIntn() int32 {
	if m != nil && m.Intn != nil {
		return *m.Intn
	}
	return 0
}

func (m *FieldMock) GetFullname() bool {
	if m != nil && m.Fullname != nil {
		return *m.Fullname
	}
	return false
}

func (m *FieldMock) GetFirstname() bool {
	if m != nil && m.Firstname != nil {
		return *m.Firstname
	}
	return false
}

func (m *FieldMock) GetLastname() bool {
	if m != nil && m.Lastname != nil {
		return *m.Lastname
	}
	return false
}

func (m *FieldMock) GetParagraph() bool {
	if m != nil && m.Paragraph != nil {
		return *m.Paragraph
	}
	return false
}

func (m *FieldMock) GetParagraphs() bool {
	if m != nil && m.Paragraphs != nil {
		return *m.Paragraphs
	}
	return false
}

func (m *FieldMock) GetParagraphsn() int32 {
	if m != nil && m.Paragraphsn != nil {
		return *m.Paragraphsn
	}
	return 0
}

func (m *FieldMock) GetUuid() bool {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return false
}

func (m *FieldMock) GetEmail() bool {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return false
}

func (m *FieldMock) GetPhone() bool {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return false
}

func (m *FieldMock) GetCompany() bool {
	if m != nil && m.Company != nil {
		return *m.Company
	}
	return false
}

func (m *FieldMock) GetBrand() bool {
	if m != nil && m.Brand != nil {
		return *m.Brand
	}
	return false
}

func (m *FieldMock) GetProduct() bool {
	if m != nil && m.Product != nil {
		return *m.Product
	}
	return false
}

func (m *FieldMock) GetColor() bool {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return false
}

func (m *FieldMock) GetHexcolor() bool {
	if m != nil && m.Hexcolor != nil {
		return *m.Hexcolor
	}
	return false
}

func (m *FieldMock) GetPrefix() []string {
	if m != nil {
		return m.Prefix
	}
	return nil
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*FieldMock)(nil),
	Field:         66300,
	Name:          "grpcmock.field",
	Tag:           "bytes,66300,opt,name=field",
	Filename:      "grpcmock.proto",
}

func init() {
	proto.RegisterType((*FieldMock)(nil), "grpcmock.FieldMock")
	proto.RegisterExtension(E_Field)
}

func init() { proto.RegisterFile("grpcmock.proto", fileDescriptor_f8c8c9b9c4c355de) }

var fileDescriptor_f8c8c9b9c4c355de = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0x4f, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x15, 0x9a, 0xb4, 0xc9, 0x06, 0x0a, 0x6c, 0x2b, 0x34, 0xaa, 0x00, 0x59, 0x9c, 0x72,
	0xc1, 0x51, 0x23, 0xc4, 0x81, 0x23, 0x48, 0x1c, 0x90, 0x10, 0x52, 0xb8, 0x71, 0xdb, 0xd8, 0x6b,
	0x67, 0x55, 0x7b, 0x77, 0xb5, 0x7f, 0x44, 0x7b, 0x46, 0x7c, 0x6b, 0x0e, 0x68, 0x66, 0x6c, 0xa7,
	0xa7, 0xcc, 0xef, 0xcd, 0x9b, 0x51, 0x3c, 0xfb, 0xc4, 0x65, 0x1b, 0x7c, 0xd5, 0xbb, 0xea, 0xae,
	0xf4, 0xc1, 0x25, 0x27, 0x97, 0x23, 0xdf, 0x14, 0xad, 0x73, 0x6d, 0xa7, 0xb7, 0xa4, 0x1f, 0x72,
	0xb3, 0xad, 0x75, 0xac, 0x82, 0xf1, 0xc9, 0x05, 0xf6, 0xbe, 0xfb, 0x33, 0x17, 0xab, 0xaf, 0x46,
	0x77, 0xf5, 0x77, 0x57, 0xdd, 0xc9, 0x57, 0xe2, 0x3c, 0xa6, 0x60, 0x6c, 0x0b, 0xb3, 0xe2, 0x6c,
	0xb3, 0xda, 0x0f, 0x24, 0xa5, 0x98, 0xff, 0x76, 0xa1, 0x86, 0x27, 0xc5, 0x6c, 0xb3, 0xdc, 0x53,
	0x2d, 0xaf, 0xc5, 0x02, 0x7f, 0x23, 0x9c, 0x91, 0xc8, 0x80, 0x1b, 0xa8, 0xb0, 0x30, 0x2f, 0x66,
	0x9b, 0xc5, 0x7e, 0x20, 0xdc, 0x60, 0x6c, 0xb2, 0xb0, 0x20, 0x95, 0x6a, 0x79, 0x23, 0x96, 0x4d,
	0xee, 0x3a, 0xab, 0x7a, 0x0d, 0xe7, 0xb4, 0x64, 0x62, 0xf9, 0x5a, 0xac, 0x1a, 0x13, 0x62, 0xa2,
	0xe6, 0x05, 0x35, 0x4f, 0x02, 0x4e, 0x76, 0x6a, 0x68, 0x2e, 0x79, 0x72, 0x64, 0x9c, 0xf4, 0x2a,
	0xa8, 0x36, 0x28, 0x7f, 0x84, 0x15, 0x4f, 0x4e, 0x82, 0x7c, 0x2b, 0xc4, 0x04, 0x11, 0x04, 0xb5,
	0x1f, 0x29, 0xb2, 0x10, 0xeb, 0x13, 0x59, 0x58, 0xd3, 0xdf, 0x7d, 0x2c, 0xe1, 0x97, 0xe4, 0x6c,
	0x6a, 0x78, 0xca, 0xb7, 0xc0, 0x1a, 0x6f, 0xa1, 0x7b, 0x65, 0x3a, 0x78, 0xc6, 0xb7, 0x20, 0x40,
	0xd5, 0x1f, 0x9d, 0xd5, 0x70, 0xc9, 0x2a, 0x81, 0x04, 0x71, 0x51, 0xb9, 0xde, 0x2b, 0xfb, 0x00,
	0xcf, 0x49, 0x1f, 0x11, 0xfd, 0x87, 0xa0, 0x6c, 0x0d, 0x2f, 0xd8, 0x4f, 0x80, 0x7e, 0x1f, 0x5c,
	0x9d, 0xab, 0x04, 0x2f, 0xd9, 0x3f, 0x20, 0xfa, 0x2b, 0xd7, 0xb9, 0x00, 0x92, 0xfd, 0x04, 0x78,
	0x9b, 0xa3, 0xbe, 0xe7, 0xc6, 0x15, 0xdf, 0x66, 0x64, 0x7c, 0x1d, 0x1f, 0x74, 0x63, 0xee, 0xe1,
	0x9a, 0xdf, 0x97, 0xe9, 0xd3, 0x37, 0xb1, 0x68, 0x30, 0x04, 0xf2, 0x4d, 0xc9, 0x89, 0x29, 0xc7,
	0xc4, 0x94, 0x14, 0x8e, 0x1f, 0x3e, 0x19, 0x67, 0x23, 0xfc, 0xfb, 0x8b, 0xaf, 0xba, 0xde, 0x5d,
	0x95, 0x53, 0xe4, 0xa6, 0xf0, 0xec, 0x79, 0xc5, 0xe7, 0x8f, 0xbf, 0x3e, 0xb4, 0x26, 0x1d, 0xf3,
	0xa1, 0xac, 0x5c, 0xbf, 0xfd, 0xa9, 0x1a, 0x9d, 0x1e, 0xbe, 0xe4, 0x2e, 0xe5, 0xa0, 0xb7, 0xf1,
	0x76, 0xf7, 0x9e, 0x36, 0x9f, 0x12, 0x19, 0x6f, 0x77, 0x54, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x3a, 0x56, 0xda, 0x6f, 0xc6, 0x02, 0x00, 0x00,
}

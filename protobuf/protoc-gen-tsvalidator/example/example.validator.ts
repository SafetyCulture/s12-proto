// Code generated by protoc-gen-tsvalidator. DO NOT EDIT.
// versions:
// 	protoc-gen-tsvalidator v2.6.0
// 	protoc                 v4.24.4
// source: example.proto

import { z } from "zod";

export const InnerMessage_Id = z.string().uuid();
export const InnerMessageValidator = z.object({ id: InnerMessage_Id });

export const InnerMessageWithLegacyId_Id = z.string();
export const InnerMessageWithLegacyIdValidator = z.object({
  id: InnerMessageWithLegacyId_Id,
});

export const ExampleMessage_NestedMessage_Val = z
  .string()
  .trim()
  .min(1)
  .max(40);
export const ExampleMessage_NestedMessage_NestedEmail = z
  .string()
  .regex(/.+\@.+\..+/);
export const ExampleMessage_NestedMessage_MemberEmails = z
  .string()
  .regex(
    /[a-z0-9!#$&'*+/=?^_{|}~-]+(?:\.[a-z0-9!#$&'*+/=?^_{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/,
  );
export const ExampleMessage_NestedMessage_MemberEmailsArray =
  ExampleMessage_NestedMessage_MemberEmails.array().min(2).max(5);
export const ExampleMessage_NestedMessageValidator = z.object({
  memberEmails: ExampleMessage_NestedMessage_MemberEmailsArray,
  val: ExampleMessage_NestedMessage_Val,
  nestedEmail: ExampleMessage_NestedMessage_NestedEmail,
});

export const ExampleMessage_Contact_Phone = z.string().optional();
export const ExampleMessage_Contact_Email = z.string().email().optional();
export const ExampleMessage_ContactValidator = z.object({
  phone: ExampleMessage_Contact_Phone,
  email: ExampleMessage_Contact_Email,
});

export const ExampleMessage_Id = z.string().uuid();
export const ExampleMessage_UserId = z
  .string()
  .refine((val) => new Blob([val]).size === 16);
export const ExampleMessage_Email = z
  .string()
  .url()
  .regex(/^(https)\:\/\//)
  .optional();
export const ExampleMessage_Age = z.number().int();
export const ExampleMessage_AgeArray = ExampleMessage_Age.array();
export const ExampleMessage_Speed = z.number().int();
export const ExampleMessage_Score = z.number().int();
export const ExampleMessage_Inner = InnerMessageValidator.optional();
export const ExampleMessage_Ids = z
  .string()
  .refine((val) => new Blob([val]).size === 16);
export const ExampleMessage_IdsArray = ExampleMessage_Ids.array();
export const ExampleMessage_MediaId = z.string().uuid().optional();
export const ExampleMessage_Description = z.string().max(2000);
export const ExampleMessage_Password = z.string().min(8);
export const ExampleMessage_Phone = z.string().min(11);
export const ExampleMessage_MsgRequired = InnerMessageValidator;
export const ExampleMessage_LegacyId = z.string();
export const ExampleMessage_InnerLegacyId =
  InnerMessageWithLegacyIdValidator.optional();
export const ExampleMessage_Name = z.string().trim().min(6).max(10);
export const ExampleMessage_NestedMessage =
  ExampleMessage_NestedMessageValidator.optional();
export const ExampleMessage_NotSupported = z.object({});
export const ExampleMessage_Url = z
  .string()
  .regex(/https:\/\/www\.safetyculture\.(io|com)/);
export const ExampleMessage_ContactsWithLengthConstraint =
  ExampleMessage_ContactValidator.optional();
export const ExampleMessage_ContactsWithNoLengthConstraint =
  ExampleMessage_ContactValidator.optional();
export const ExampleMessage_ScheduledFor = z.string().datetime().optional();
export const ExampleMessage_Timezone = z.enum([
  ...Intl.supportedValuesOf("timeZone"),
] as [string, ...string[]]);
export const ExampleMessage_TimezoneOptional = z
  .enum([...Intl.supportedValuesOf("timeZone")] as [string, ...string[]])
  .optional();
export const ExampleMessage_StringOptional = z
  .string()
  .min(1)
  .max(130)
  .optional();
export const ExampleMessageValidator = z.object({
  timezone: ExampleMessage_Timezone,
  stringOptional: ExampleMessage_StringOptional,
  email: ExampleMessage_Email,
  speed: ExampleMessage_Speed,
  description: ExampleMessage_Description,
  password: ExampleMessage_Password,
  phone: ExampleMessage_Phone,
  name: ExampleMessage_Name,
  timezoneOptional: ExampleMessage_TimezoneOptional,
  id: ExampleMessage_Id,
  userId: ExampleMessage_UserId,
  ids: ExampleMessage_IdsArray,
  mediaId: ExampleMessage_MediaId,
  legacyId: ExampleMessage_LegacyId,
  score: ExampleMessage_Score,
  age: ExampleMessage_AgeArray,
  notSupported: ExampleMessage_NotSupported,
  url: ExampleMessage_Url,
});

export const OuterMessageUsingNestedMessage_SomeMessage =
  ExampleMessage_NestedMessageValidator.optional();
export const OuterMessageUsingNestedMessageValidator = z.object({});

const enumEnum = {
  MY_ENUM_UNSPECIFIED: 0,
  MY_ENUM_FIRST: 1,
} as const;
export const MyMessageWithEnum_Enum = z.nativeEnum(enumEnum);
export const MyMessageWithEnumValidator = z.object({
  enum: MyMessageWithEnum_Enum,
});

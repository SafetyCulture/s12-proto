// Code generated by protoc-gen-tsvalidator. DO NOT EDIT.
// versions:
// 	protoc-gen-tsvalidator v2.6.0
// 	protoc                 v4.24.4
// source: valtest.proto

import { z } from "zod";

export const ValTestMessage_NestedMessage_Val = z.string().min(1).max(100);
export const ValTestMessage_NestedMessage_NestedEmail = z.string().email();
export const ValTestMessage_NestedMessage_MemberEmails = z.string().email();
export const ValTestMessage_NestedMessage_MemberEmailsArray =
  ValTestMessage_NestedMessage_MemberEmails.array().min(2).max(5);
export const ValTestMessage_NestedMessageValidator = z.object({
  memberEmails: ValTestMessage_NestedMessage_MemberEmailsArray,
  val: ValTestMessage_NestedMessage_Val,
  nestedEmail: ValTestMessage_NestedMessage_NestedEmail,
});

export const OuterMessageUsingNestedMessage_SomeMessage =
  ValTestMessage_NestedMessageValidator.optional();
export const OuterMessageUsingNestedMessageValidator = z.object({});

export const ScimEmail_Value = z.string().email();
export const ScimEmailValidator = z.object({ value: ScimEmail_Value });

const enumsEnum = {
  MY_ENUM_UNSPECIFIED: 0,
  MY_ENUM_FIRST: 1,
} as const;
export const MyMessageWithRepeatedEnum_Enums = z.nativeEnum(enumsEnum);
export const MyMessageWithRepeatedEnum_EnumsArray =
  MyMessageWithRepeatedEnum_Enums.array();
export const MyMessageWithRepeatedEnumValidator = z.object({
  enums: MyMessageWithRepeatedEnum_EnumsArray,
});

export const GeoValidationMessage_Latitude = z
  .number()
  .min(-90)
  .max(90)
  .optional();
export const GeoValidationMessage_Longitude = z
  .number()
  .min(-180)
  .max(180)
  .optional();
export const GeoValidationMessage_Accuracy = z
  .number()
  .int()
  .min(0)
  .max(10000)
  .optional();
export const GeoValidationMessageValidator = z.object({
  latitude: GeoValidationMessage_Latitude,
  longitude: GeoValidationMessage_Longitude,
  accuracy: GeoValidationMessage_Accuracy,
});

export const LogOnlyValidationMessage_ImageId = z.string().uuid().uuid();
export const LogOnlyValidationMessage_InspectionId = z.string().uuid();
export const LogOnlyValidationMessage_OwnerId = z.string().uuid();
export const LogOnlyValidationMessage_Title = z
  .string()
  .min(1)
  .max(10)
  .optional();
export const LogOnlyValidationMessage_Name = z.string().min(1).max(5);
export const LogOnlyValidationMessage_Latitude = z
  .number()
  .min(-90)
  .max(90)
  .optional();
export const LogOnlyValidationMessage_Longitude = z
  .number()
  .min(-180)
  .max(180)
  .optional();
export const LogOnlyValidationMessage_Accuracy = z
  .number()
  .int()
  .min(0)
  .max(10000)
  .optional();
export const LogOnlyValidationMessage_Answer = z.string().max(40).optional();
export const LogOnlyValidationMessage_Note = z
  .string()
  .min(5)
  .max(40)
  .optional();
export const LogOnlyValidationMessageValidator = z.object({
  longitude: LogOnlyValidationMessage_Longitude,
  note: LogOnlyValidationMessage_Note,
  inspectionId: LogOnlyValidationMessage_InspectionId,
  ownerId: LogOnlyValidationMessage_OwnerId,
  latitude: LogOnlyValidationMessage_Latitude,
  accuracy: LogOnlyValidationMessage_Accuracy,
  answer: LogOnlyValidationMessage_Answer,
  imageId: LogOnlyValidationMessage_ImageId,
  title: LogOnlyValidationMessage_Title,
  name: LogOnlyValidationMessage_Name,
});

const enumEnum = {
  MY_ENUM_UNSPECIFIED: 0,
  MY_ENUM_FIRST: 1,
} as const;
export const MyMessageWithEnum_Enum = z.nativeEnum(enumEnum);
export const MyMessageWithEnum_Enums = z.nativeEnum(enumsEnum);
export const MyMessageWithEnum_EnumsArray = MyMessageWithEnum_Enums.array();
export const MyMessageWithEnumValidator = z.object({
  enum: MyMessageWithEnum_Enum,
  enums: MyMessageWithEnum_EnumsArray,
});

export const MyMessageWithRepeatedField_MyInt = z.number().int();
export const MyMessageWithRepeatedField_MyIntArray =
  MyMessageWithRepeatedField_MyInt.array().max(5);
export const MyMessageWithRepeatedFieldValidator = z.object({
  myInt: MyMessageWithRepeatedField_MyIntArray,
});

export const MyOneOfMsg_FirstType_Value = z.number().int();
export const MyOneOfMsg_FirstTypeValidator = z.object({
  value: MyOneOfMsg_FirstType_Value,
});

export const MyOneOfMsg_SecondType_Value = z.number().int();
export const MyOneOfMsg_SecondTypeValidator = z.object({
  value: MyOneOfMsg_SecondType_Value,
});

export const MyOneOfMsg_MyFirstField = MyOneOfMsg_FirstTypeValidator.optional();
export const MyOneOfMsg_MySecondField =
  MyOneOfMsg_SecondTypeValidator.optional();
export const MyOneOfMsg_MyThirdField = z.string().min(1);
export const MyOneOfMsgValidator = z.object({
  myThirdField: MyOneOfMsg_MyThirdField,
});

export const InnerMessageWithLegacyId_Id = z.string().uuid();
export const InnerMessageWithLegacyIdValidator = z.object({
  id: InnerMessageWithLegacyId_Id,
});

export const InnerMessage_Id = z.string().uuid();
export const InnerMessageValidator = z.object({ id: InnerMessage_Id });

export const ValTestMessage_Contact_Phone = z.string().optional();
export const ValTestMessage_Contact_Email = z.string().email();
export const ValTestMessage_ContactValidator = z.object({
  phone: ValTestMessage_Contact_Phone,
  email: ValTestMessage_Contact_Email,
});

export const InnerMessageWithS12Id_Id = z.string().uuid();
export const InnerMessageWithS12IdValidator = z.object({
  id: InnerMessageWithS12Id_Id,
});

export const ValTestMessage_Id = z.string().uuid();
export const ValTestMessage_Ids = z.string().uuid();
export const ValTestMessage_IdsArray = ValTestMessage_Ids.array();
export const ValTestMessage_MediaId = z.string().uuid().optional();
export const ValTestMessage_LegacyId = z.string().uuid();
export const ValTestMessage_InnerLegacyId =
  InnerMessageWithLegacyIdValidator.optional();
export const ValTestMessage_Uuid = z.string();
export const ValTestMessage_Email = z.string().email();
export const ValTestMessage_OptEmail = z.string().email().optional();
export const ValTestMessage_Description = z.string().min(1).max(750);
export const ValTestMessage_Password = z.string().min(8).max(130);
export const ValTestMessage_Title = z.string().min(3).max(50);
export const ValTestMessage_FixedString = z.string().min(4).max(4);
export const ValTestMessage_RuneString = z.string().min(4).max(4);
export const ValTestMessage_ReplaceString = z.string().min(1).max(130);
export const ValTestMessage_NotReplaceString = z.string().min(1).max(130);
export const ValTestMessage_AllowString = z.string().min(1).max(130);
export const ValTestMessage_SymbolString = z.string().min(1).max(130);
export const ValTestMessage_SymbolsString = z.string().min(1).max(130);
export const ValTestMessage_NewlineString = z.string().min(1).max(130);
export const ValTestMessage_InvalidEncodingString = z.string().min(1).max(130);
export const ValTestMessage_OptString = z.string().min(1).max(130).optional();
export const ValTestMessage_TrimString = z.string().min(1).max(130);
export const ValTestMessage_AllString = z.string().min(1).max(130);
export const ValTestMessage_Name = z.string().min(1).max(50).optional();
export const ValTestMessage_ScTitle = z.string().min(1).max(500).optional();
export const ValTestMessage_ScPermissive = z
  .string()
  .min(1)
  .max(1000)
  .optional();
export const ValTestMessage_NotSanitisePua = z
  .string()
  .min(1)
  .max(130)
  .optional();
export const ValTestMessage_SanitisePua = z.string().min(1).max(130).optional();
export const ValTestMessage_SanitiseLength = z
  .string()
  .min(2)
  .max(2)
  .optional();
export const ValTestMessage_OptionalString = z
  .string()
  .min(1)
  .max(130)
  .optional();
export const ValTestMessage_Phone = z.string().min(11).max(11);
export const ValTestMessage_MsgRequired = InnerMessageValidator;
export const ValTestMessage_NestedMessage =
  ValTestMessage_NestedMessageValidator.optional();
export const ValTestMessage_NotSupported = z.object({});
export const ValTestMessage_ContactsWithLengthConstraint =
  ValTestMessage_ContactValidator.optional();
export const ValTestMessage_ContactsWithoutLengthConstraint =
  ValTestMessage_ContactValidator.optional();
export const ValTestMessage_S12Id = z.string().uuid();
export const ValTestMessage_InnerS12Id =
  InnerMessageWithS12IdValidator.optional();
export const ValTestMessage_AllId = z.string().uuid().optional();
export const ValTestMessage_Url = z
  .string()
  .url()
  .regex(/^(https)\:\/\//);
export const ValTestMessage_UrlAllOpts = z
  .string()
  .url()
  .regex(/^(ftp|ftps|http)\:\/\//)
  .optional();
export const ValTestMessage_Timezone = z.enum([
  ...Intl.supportedValuesOf("timeZone"),
] as [string, ...string[]]);
export const ValTestMessage_TimezoneOptional = z
  .enum([...Intl.supportedValuesOf("timeZone")] as [string, ...string[]])
  .optional();
export const ValTestMessage_LongString = z
  .string()
  .min(1)
  .max(30000)
  .optional();
export const ValTestMessageValidator = z.object({
  sanitiseLength: ValTestMessage_SanitiseLength,
  urlAllOpts: ValTestMessage_UrlAllOpts,
  timezoneOptional: ValTestMessage_TimezoneOptional,
  notSanitisePua: ValTestMessage_NotSanitisePua,
  description: ValTestMessage_Description,
  symbolsString: ValTestMessage_SymbolsString,
  name: ValTestMessage_Name,
  notSupported: ValTestMessage_NotSupported,
  replaceString: ValTestMessage_ReplaceString,
  scPermissive: ValTestMessage_ScPermissive,
  optionalString: ValTestMessage_OptionalString,
  optString: ValTestMessage_OptString,
  phone: ValTestMessage_Phone,
  timezone: ValTestMessage_Timezone,
  id: ValTestMessage_Id,
  uuid: ValTestMessage_Uuid,
  password: ValTestMessage_Password,
  mediaId: ValTestMessage_MediaId,
  s12Id: ValTestMessage_S12Id,
  notReplaceString: ValTestMessage_NotReplaceString,
  newlineString: ValTestMessage_NewlineString,
  trimString: ValTestMessage_TrimString,
  scTitle: ValTestMessage_ScTitle,
  sanitisePua: ValTestMessage_SanitisePua,
  ids: ValTestMessage_IdsArray,
  email: ValTestMessage_Email,
  fixedString: ValTestMessage_FixedString,
  allId: ValTestMessage_AllId,
  longString: ValTestMessage_LongString,
  symbolString: ValTestMessage_SymbolString,
  legacyId: ValTestMessage_LegacyId,
  title: ValTestMessage_Title,
  runeString: ValTestMessage_RuneString,
  allString: ValTestMessage_AllString,
  url: ValTestMessage_Url,
  optEmail: ValTestMessage_OptEmail,
  allowString: ValTestMessage_AllowString,
  invalidEncodingString: ValTestMessage_InvalidEncodingString,
});

export const LowercaseValidationMessage_Uuidv4 = z.string().uuid();
export const LowercaseValidationMessage_Uuidv4LogOnly = z.string().uuid();
export const LowercaseValidationMessage_S12Id = z.string().uuid();
export const LowercaseValidationMessage_S12IdLogOnly = z.string().uuid();
export const LowercaseValidationMessage_Legacy = z.string().uuid();
export const LowercaseValidationMessage_LegacyLogOnly = z.string().uuid();
export const LowercaseValidationMessage_RevId = z
  .string()
  .regex(/^((\d)+-([0-9a-f]){32})?$/);
export const LowercaseValidationMessage_QuestionId = z.string().uuid();
export const LowercaseValidationMessage_ItemId = z.string().uuid().optional();
export const LowercaseValidationMessageValidator = z.object({
  legacyLogOnly: LowercaseValidationMessage_LegacyLogOnly,
  uuidv4: LowercaseValidationMessage_Uuidv4,
  s12id: LowercaseValidationMessage_S12Id,
  s12idLogOnly: LowercaseValidationMessage_S12IdLogOnly,
  legacy: LowercaseValidationMessage_Legacy,
  revId: LowercaseValidationMessage_RevId,
  questionId: LowercaseValidationMessage_QuestionId,
  itemId: LowercaseValidationMessage_ItemId,
  uuidv4LogOnly: LowercaseValidationMessage_Uuidv4LogOnly,
});

export const NestedLevel3Message_OrgId5 = z.string().min(5).max(5);
export const NestedLevel3MessageValidator = z.object({
  orgId5: NestedLevel3Message_OrgId5,
});

export const NestedLevel2Message_OrgId4 = z.string().min(4).max(4);
export const NestedLevel2Message_OrgNested =
  NestedLevel3MessageValidator.optional();
export const NestedLevel2MessageValidator = z.object({
  orgId4: NestedLevel2Message_OrgId4,
});

export const ScimUser_Emails = ScimEmailValidator.optional();
export const ScimUserValidator = z.object({});

export const NestedLevel1Message_OrgId3 = z.string().min(3).max(3);
export const NestedLevel1Message_OrgNested =
  NestedLevel2MessageValidator.optional();
export const NestedLevel1MessageValidator = z.object({
  orgId3: NestedLevel1Message_OrgId3,
});

export const MyReqMessage_UserId = z.string().min(2).max(2);
export const MyReqMessage_OrgNested = NestedLevel1MessageValidator.optional();
export const MyReqMessageValidator = z.object({ userId: MyReqMessage_UserId });

export const NumberMessage_NestedNumber_Value = z
  .number()
  .int()
  .max(100)
  .optional();
export const NumberMessage_NestedNumberValidator = z.object({
  value: NumberMessage_NestedNumber_Value,
});

export const NumberMessage_NanAllowed = z.number();
export const NumberMessage_NanDisallowed = z.number();
export const NumberMessage_OptionalNoNanValue = z.number().optional();
export const NumberMessage_OptionalOnly = z.number().optional();
export const NumberMessage_RangeBasic = z.number().min(1).max(10).optional();
export const NumberMessage_RangeLow = z.number().min(1).optional();
export const NumberMessage_RangeHigh = z.number().max(10).optional();
export const NumberMessage_RangeNovalues = z.number().optional();
export const NumberMessage_RangeNotOptional = z.number().min(1).max(10);
export const NumberMessage_IntTest = z.number().int().min(1).max(99);
export const NumberMessage_Int64Test = z
  .number()
  .int()
  .min(-100)
  .max(100)
  .optional();
export const NumberMessage_UintTest = z
  .number()
  .int()
  .min(5)
  .max(99)
  .optional();
export const NumberMessage_RepeatedInt = z
  .number()
  .int()
  .min(10)
  .max(20)
  .optional();
export const NumberMessage_RepeatedIntArray = NumberMessage_RepeatedInt.array();
export const NumberMessage_NestedNumber =
  NumberMessage_NestedNumberValidator.optional();
export const NumberMessageValidator = z.object({
  rangeNovalues: NumberMessage_RangeNovalues,
  rangeNotOptional: NumberMessage_RangeNotOptional,
  repeatedInt: NumberMessage_RepeatedIntArray,
  nanAllowed: NumberMessage_NanAllowed,
  optionalOnly: NumberMessage_OptionalOnly,
  rangeHigh: NumberMessage_RangeHigh,
  rangeLow: NumberMessage_RangeLow,
  intTest: NumberMessage_IntTest,
  int64Test: NumberMessage_Int64Test,
  uintTest: NumberMessage_UintTest,
  nanDisallowed: NumberMessage_NanDisallowed,
  optionalNoNanValue: NumberMessage_OptionalNoNanValue,
  rangeBasic: NumberMessage_RangeBasic,
});

// Copyright (c) 2021 SafetyCulture Pty Ltd. All Rights Reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: valtest.proto

package valtest

import (
	_ "github.com/SafetyCulture/s12-proto/s12/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MyMessageWithEnum_MyEnum int32

const (
	// Default is unspecified.
	MyMessageWithEnum_MY_ENUM_UNSPECIFIED MyMessageWithEnum_MyEnum = 0
	// First valid value.
	MyMessageWithEnum_MY_ENUM_FIRST MyMessageWithEnum_MyEnum = 1
)

// Enum value maps for MyMessageWithEnum_MyEnum.
var (
	MyMessageWithEnum_MyEnum_name = map[int32]string{
		0: "MY_ENUM_UNSPECIFIED",
		1: "MY_ENUM_FIRST",
	}
	MyMessageWithEnum_MyEnum_value = map[string]int32{
		"MY_ENUM_UNSPECIFIED": 0,
		"MY_ENUM_FIRST":       1,
	}
)

func (x MyMessageWithEnum_MyEnum) Enum() *MyMessageWithEnum_MyEnum {
	p := new(MyMessageWithEnum_MyEnum)
	*p = x
	return p
}

func (x MyMessageWithEnum_MyEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MyMessageWithEnum_MyEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_valtest_proto_enumTypes[0].Descriptor()
}

func (MyMessageWithEnum_MyEnum) Type() protoreflect.EnumType {
	return &file_valtest_proto_enumTypes[0]
}

func (x MyMessageWithEnum_MyEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MyMessageWithEnum_MyEnum.Descriptor instead.
func (MyMessageWithEnum_MyEnum) EnumDescriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{12, 0}
}

type MyMessageWithRepeatedEnum_MyEnum int32

const (
	// Default is unspecified.
	MyMessageWithRepeatedEnum_MY_ENUM_UNSPECIFIED MyMessageWithRepeatedEnum_MyEnum = 0
	// First valid value.
	MyMessageWithRepeatedEnum_MY_ENUM_FIRST MyMessageWithRepeatedEnum_MyEnum = 1
)

// Enum value maps for MyMessageWithRepeatedEnum_MyEnum.
var (
	MyMessageWithRepeatedEnum_MyEnum_name = map[int32]string{
		0: "MY_ENUM_UNSPECIFIED",
		1: "MY_ENUM_FIRST",
	}
	MyMessageWithRepeatedEnum_MyEnum_value = map[string]int32{
		"MY_ENUM_UNSPECIFIED": 0,
		"MY_ENUM_FIRST":       1,
	}
)

func (x MyMessageWithRepeatedEnum_MyEnum) Enum() *MyMessageWithRepeatedEnum_MyEnum {
	p := new(MyMessageWithRepeatedEnum_MyEnum)
	*p = x
	return p
}

func (x MyMessageWithRepeatedEnum_MyEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MyMessageWithRepeatedEnum_MyEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_valtest_proto_enumTypes[1].Descriptor()
}

func (MyMessageWithRepeatedEnum_MyEnum) Type() protoreflect.EnumType {
	return &file_valtest_proto_enumTypes[1]
}

func (x MyMessageWithRepeatedEnum_MyEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MyMessageWithRepeatedEnum_MyEnum.Descriptor instead.
func (MyMessageWithRepeatedEnum_MyEnum) EnumDescriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{13, 0}
}

type ValTestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// returns an error if the string cannot be parsed as a UUID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// we do not support bytes currently for id
	// bytes user_id = 2 [(validator.id) = {}];
	// can validate each repeated item too
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// only validate if non-zero value
	MediaId string `protobuf:"bytes,4,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	// returns an error if the string cannot be parsed as a legacy id
	LegacyId string `protobuf:"bytes,5,opt,name=legacy_id,json=legacyId,proto3" json:"legacy_id,omitempty"`
	// InnerMessage can contain a legacy id too
	InnerLegacyId *InnerMessageWithLegacyId `protobuf:"bytes,6,opt,name=inner_legacy_id,json=innerLegacyId,proto3" json:"inner_legacy_id,omitempty"`
	// email validation
	Email string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	// optional email address
	OptEmail string `protobuf:"bytes,12,opt,name=opt_email,json=optEmail,proto3" json:"opt_email,omitempty"`
	// validate the max length of a string
	Description string `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	// validate the min length (max length defaults to current default string len (130))
	Password string `protobuf:"bytes,22,opt,name=password,proto3" json:"password,omitempty"`
	// validate min and max length
	Title string `protobuf:"bytes,23,opt,name=title,proto3" json:"title,omitempty"`
	// validate fixed length
	FixedString string `protobuf:"bytes,24,opt,name=fixed_string,json=fixedString,proto3" json:"fixed_string,omitempty"`
	// validate length in runes instead of bytes
	RuneString string `protobuf:"bytes,25,opt,name=rune_string,json=runeString,proto3" json:"rune_string,omitempty"`
	// replace unsafe chars
	ReplaceString    string `protobuf:"bytes,26,opt,name=replace_string,json=replaceString,proto3" json:"replace_string,omitempty"`
	NotReplaceString string `protobuf:"bytes,27,opt,name=not_replace_string,json=notReplaceString,proto3" json:"not_replace_string,omitempty"`
	// allow additional characters including # as part of the restricted chars list (should be replaced by replace_unsafe)
	AllowString string `protobuf:"bytes,28,opt,name=allow_string,json=allowString,proto3" json:"allow_string,omitempty"`
	// allow symbol category
	SymbolString string `protobuf:"bytes,29,opt,name=symbol_string,json=symbolString,proto3" json:"symbol_string,omitempty"`
	// allow multiple symbol categories
	SymbolsString string `protobuf:"bytes,30,opt,name=symbols_string,json=symbolsString,proto3" json:"symbols_string,omitempty"`
	// allow newlines
	NewlineString string `protobuf:"bytes,31,opt,name=newline_string,json=newlineString,proto3" json:"newline_string,omitempty"`
	// disable encoding validation
	InvalidEncodingString string `protobuf:"bytes,32,opt,name=invalid_encoding_string,json=invalidEncodingString,proto3" json:"invalid_encoding_string,omitempty"`
	// optional string
	OptString string `protobuf:"bytes,33,opt,name=opt_string,json=optString,proto3" json:"opt_string,omitempty"`
	// trimmed string
	TrimString string `protobuf:"bytes,34,opt,name=trim_string,json=trimString,proto3" json:"trim_string,omitempty"`
	// all options
	AllString string `protobuf:"bytes,35,opt,name=all_string,json=allString,proto3" json:"all_string,omitempty"`
	// custom tests for names
	Name    string `protobuf:"bytes,36,opt,name=name,proto3" json:"name,omitempty"`
	ScTitle string `protobuf:"bytes,37,opt,name=sc_title,json=scTitle,proto3" json:"sc_title,omitempty"`
	// this is an example of a definition that will allow many characters but still will replace unsafe chars
	// normally, definitions like this should be avoided as it is unlikely that it will match your data requirements
	// however, as a starting point, with these settings it is very unlikely that user input is rejected unless it is malformed
	ScPermissive   string `protobuf:"bytes,38,opt,name=sc_permissive,json=scPermissive,proto3" json:"sc_permissive,omitempty"`
	NotSanitisePua string `protobuf:"bytes,39,opt,name=not_sanitise_pua,json=notSanitisePua,proto3" json:"not_sanitise_pua,omitempty"`
	SanitisePua    string `protobuf:"bytes,40,opt,name=sanitise_pua,json=sanitisePua,proto3" json:"sanitise_pua,omitempty"`
	SanitiseLength string `protobuf:"bytes,41,opt,name=sanitise_length,json=sanitiseLength,proto3" json:"sanitise_length,omitempty"`
	// field without any validation
	NoValidation string `protobuf:"bytes,50,opt,name=no_validation,json=noValidation,proto3" json:"no_validation,omitempty"`
	// Types that are assignable to ContactOneof:
	//	*ValTestMessage_Fax
	//	*ValTestMessage_Phone
	ContactOneof isValTestMessage_ContactOneof `protobuf_oneof:"contact_oneof"`
	// Required inner message
	MsgRequired                     *InnerMessage                 `protobuf:"bytes,53,opt,name=msg_required,json=msgRequired,proto3" json:"msg_required,omitempty"`
	NestedMessage                   *ValTestMessage_NestedMessage `protobuf:"bytes,56,opt,name=nested_message,json=nestedMessage,proto3" json:"nested_message,omitempty"`
	NotSupported                    map[string]string             `protobuf:"bytes,57,rep,name=not_supported,json=notSupported,proto3" json:"not_supported,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContactsWithLengthConstraint    []*ValTestMessage_Contact     `protobuf:"bytes,58,rep,name=contacts_with_length_constraint,json=contactsWithLengthConstraint,proto3" json:"contacts_with_length_constraint,omitempty"`
	ContactsWithoutLengthConstraint []*ValTestMessage_Contact     `protobuf:"bytes,59,rep,name=contacts_without_length_constraint,json=contactsWithoutLengthConstraint,proto3" json:"contacts_without_length_constraint,omitempty"`
	// returns an error if the string cannot be parsed as a S12 id
	S12Id string `protobuf:"bytes,60,opt,name=s12_id,json=s12Id,proto3" json:"s12_id,omitempty"`
	// InnerMessage can contain a legacy id too
	InnerS12Id       *InnerMessageWithS12Id `protobuf:"bytes,61,opt,name=inner_s12_id,json=innerS12Id,proto3" json:"inner_s12_id,omitempty"`
	AllId            string                 `protobuf:"bytes,62,opt,name=all_id,json=allId,proto3" json:"all_id,omitempty"`
	Url              string                 `protobuf:"bytes,63,opt,name=url,proto3" json:"url,omitempty"`
	UrlAllOpts       string                 `protobuf:"bytes,64,opt,name=url_all_opts,json=urlAllOpts,proto3" json:"url_all_opts,omitempty"`
	Timezone         string                 `protobuf:"bytes,65,opt,name=timezone,proto3" json:"timezone,omitempty"`
	TimezoneOptional string                 `protobuf:"bytes,66,opt,name=timezone_optional,json=timezoneOptional,proto3" json:"timezone_optional,omitempty"`
}

func (x *ValTestMessage) Reset() {
	*x = ValTestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValTestMessage) ProtoMessage() {}

func (x *ValTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValTestMessage.ProtoReflect.Descriptor instead.
func (*ValTestMessage) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{0}
}

func (x *ValTestMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ValTestMessage) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ValTestMessage) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *ValTestMessage) GetLegacyId() string {
	if x != nil {
		return x.LegacyId
	}
	return ""
}

func (x *ValTestMessage) GetInnerLegacyId() *InnerMessageWithLegacyId {
	if x != nil {
		return x.InnerLegacyId
	}
	return nil
}

func (x *ValTestMessage) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ValTestMessage) GetOptEmail() string {
	if x != nil {
		return x.OptEmail
	}
	return ""
}

func (x *ValTestMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValTestMessage) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ValTestMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ValTestMessage) GetFixedString() string {
	if x != nil {
		return x.FixedString
	}
	return ""
}

func (x *ValTestMessage) GetRuneString() string {
	if x != nil {
		return x.RuneString
	}
	return ""
}

func (x *ValTestMessage) GetReplaceString() string {
	if x != nil {
		return x.ReplaceString
	}
	return ""
}

func (x *ValTestMessage) GetNotReplaceString() string {
	if x != nil {
		return x.NotReplaceString
	}
	return ""
}

func (x *ValTestMessage) GetAllowString() string {
	if x != nil {
		return x.AllowString
	}
	return ""
}

func (x *ValTestMessage) GetSymbolString() string {
	if x != nil {
		return x.SymbolString
	}
	return ""
}

func (x *ValTestMessage) GetSymbolsString() string {
	if x != nil {
		return x.SymbolsString
	}
	return ""
}

func (x *ValTestMessage) GetNewlineString() string {
	if x != nil {
		return x.NewlineString
	}
	return ""
}

func (x *ValTestMessage) GetInvalidEncodingString() string {
	if x != nil {
		return x.InvalidEncodingString
	}
	return ""
}

func (x *ValTestMessage) GetOptString() string {
	if x != nil {
		return x.OptString
	}
	return ""
}

func (x *ValTestMessage) GetTrimString() string {
	if x != nil {
		return x.TrimString
	}
	return ""
}

func (x *ValTestMessage) GetAllString() string {
	if x != nil {
		return x.AllString
	}
	return ""
}

func (x *ValTestMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValTestMessage) GetScTitle() string {
	if x != nil {
		return x.ScTitle
	}
	return ""
}

func (x *ValTestMessage) GetScPermissive() string {
	if x != nil {
		return x.ScPermissive
	}
	return ""
}

func (x *ValTestMessage) GetNotSanitisePua() string {
	if x != nil {
		return x.NotSanitisePua
	}
	return ""
}

func (x *ValTestMessage) GetSanitisePua() string {
	if x != nil {
		return x.SanitisePua
	}
	return ""
}

func (x *ValTestMessage) GetSanitiseLength() string {
	if x != nil {
		return x.SanitiseLength
	}
	return ""
}

func (x *ValTestMessage) GetNoValidation() string {
	if x != nil {
		return x.NoValidation
	}
	return ""
}

func (m *ValTestMessage) GetContactOneof() isValTestMessage_ContactOneof {
	if m != nil {
		return m.ContactOneof
	}
	return nil
}

func (x *ValTestMessage) GetFax() string {
	if x, ok := x.GetContactOneof().(*ValTestMessage_Fax); ok {
		return x.Fax
	}
	return ""
}

func (x *ValTestMessage) GetPhone() string {
	if x, ok := x.GetContactOneof().(*ValTestMessage_Phone); ok {
		return x.Phone
	}
	return ""
}

func (x *ValTestMessage) GetMsgRequired() *InnerMessage {
	if x != nil {
		return x.MsgRequired
	}
	return nil
}

func (x *ValTestMessage) GetNestedMessage() *ValTestMessage_NestedMessage {
	if x != nil {
		return x.NestedMessage
	}
	return nil
}

func (x *ValTestMessage) GetNotSupported() map[string]string {
	if x != nil {
		return x.NotSupported
	}
	return nil
}

func (x *ValTestMessage) GetContactsWithLengthConstraint() []*ValTestMessage_Contact {
	if x != nil {
		return x.ContactsWithLengthConstraint
	}
	return nil
}

func (x *ValTestMessage) GetContactsWithoutLengthConstraint() []*ValTestMessage_Contact {
	if x != nil {
		return x.ContactsWithoutLengthConstraint
	}
	return nil
}

func (x *ValTestMessage) GetS12Id() string {
	if x != nil {
		return x.S12Id
	}
	return ""
}

func (x *ValTestMessage) GetInnerS12Id() *InnerMessageWithS12Id {
	if x != nil {
		return x.InnerS12Id
	}
	return nil
}

func (x *ValTestMessage) GetAllId() string {
	if x != nil {
		return x.AllId
	}
	return ""
}

func (x *ValTestMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ValTestMessage) GetUrlAllOpts() string {
	if x != nil {
		return x.UrlAllOpts
	}
	return ""
}

func (x *ValTestMessage) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ValTestMessage) GetTimezoneOptional() string {
	if x != nil {
		return x.TimezoneOptional
	}
	return ""
}

type isValTestMessage_ContactOneof interface {
	isValTestMessage_ContactOneof()
}

type ValTestMessage_Fax struct {
	Fax string `protobuf:"bytes,51,opt,name=fax,proto3,oneof"`
}

type ValTestMessage_Phone struct {
	Phone string `protobuf:"bytes,52,opt,name=phone,proto3,oneof"`
}

func (*ValTestMessage_Fax) isValTestMessage_ContactOneof() {}

func (*ValTestMessage_Phone) isValTestMessage_ContactOneof() {}

type LogOnlyValidationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId      string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	InspectionId string `protobuf:"bytes,2,opt,name=inspection_id,json=inspectionId,proto3" json:"inspection_id,omitempty"`
	OwnerId      string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *LogOnlyValidationMessage) Reset() {
	*x = LogOnlyValidationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogOnlyValidationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOnlyValidationMessage) ProtoMessage() {}

func (x *LogOnlyValidationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOnlyValidationMessage.ProtoReflect.Descriptor instead.
func (*LogOnlyValidationMessage) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{1}
}

func (x *LogOnlyValidationMessage) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *LogOnlyValidationMessage) GetInspectionId() string {
	if x != nil {
		return x.InspectionId
	}
	return ""
}

func (x *LogOnlyValidationMessage) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type OuterMessageUsingNestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeMessage *ValTestMessage_NestedMessage `protobuf:"bytes,1,opt,name=some_message,json=someMessage,proto3" json:"some_message,omitempty"`
}

func (x *OuterMessageUsingNestedMessage) Reset() {
	*x = OuterMessageUsingNestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OuterMessageUsingNestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OuterMessageUsingNestedMessage) ProtoMessage() {}

func (x *OuterMessageUsingNestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OuterMessageUsingNestedMessage.ProtoReflect.Descriptor instead.
func (*OuterMessageUsingNestedMessage) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{2}
}

func (x *OuterMessageUsingNestedMessage) GetSomeMessage() *ValTestMessage_NestedMessage {
	if x != nil {
		return x.SomeMessage
	}
	return nil
}

type InnerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InnerMessage) Reset() {
	*x = InnerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerMessage) ProtoMessage() {}

func (x *InnerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerMessage.ProtoReflect.Descriptor instead.
func (*InnerMessage) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{3}
}

func (x *InnerMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type InnerMessageWithLegacyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InnerMessageWithLegacyId) Reset() {
	*x = InnerMessageWithLegacyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerMessageWithLegacyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerMessageWithLegacyId) ProtoMessage() {}

func (x *InnerMessageWithLegacyId) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerMessageWithLegacyId.ProtoReflect.Descriptor instead.
func (*InnerMessageWithLegacyId) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{4}
}

func (x *InnerMessageWithLegacyId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type InnerMessageWithS12Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InnerMessageWithS12Id) Reset() {
	*x = InnerMessageWithS12Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerMessageWithS12Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerMessageWithS12Id) ProtoMessage() {}

func (x *InnerMessageWithS12Id) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerMessageWithS12Id.ProtoReflect.Descriptor instead.
func (*InnerMessageWithS12Id) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{5}
}

func (x *InnerMessageWithS12Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NestedLevel3Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId5 string `protobuf:"bytes,1,opt,name=org_id5,json=orgId5,proto3" json:"org_id5,omitempty"`
}

func (x *NestedLevel3Message) Reset() {
	*x = NestedLevel3Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedLevel3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedLevel3Message) ProtoMessage() {}

func (x *NestedLevel3Message) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedLevel3Message.ProtoReflect.Descriptor instead.
func (*NestedLevel3Message) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{6}
}

func (x *NestedLevel3Message) GetOrgId5() string {
	if x != nil {
		return x.OrgId5
	}
	return ""
}

type NestedLevel2Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId4    string               `protobuf:"bytes,1,opt,name=org_id4,json=orgId4,proto3" json:"org_id4,omitempty"`
	OrgNested *NestedLevel3Message `protobuf:"bytes,2,opt,name=org_nested,json=orgNested,proto3" json:"org_nested,omitempty"`
}

func (x *NestedLevel2Message) Reset() {
	*x = NestedLevel2Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedLevel2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedLevel2Message) ProtoMessage() {}

func (x *NestedLevel2Message) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedLevel2Message.ProtoReflect.Descriptor instead.
func (*NestedLevel2Message) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{7}
}

func (x *NestedLevel2Message) GetOrgId4() string {
	if x != nil {
		return x.OrgId4
	}
	return ""
}

func (x *NestedLevel2Message) GetOrgNested() *NestedLevel3Message {
	if x != nil {
		return x.OrgNested
	}
	return nil
}

type NestedLevel1Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId3    string               `protobuf:"bytes,1,opt,name=org_id3,json=orgId3,proto3" json:"org_id3,omitempty"`
	OrgNested *NestedLevel2Message `protobuf:"bytes,2,opt,name=org_nested,json=orgNested,proto3" json:"org_nested,omitempty"`
}

func (x *NestedLevel1Message) Reset() {
	*x = NestedLevel1Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedLevel1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedLevel1Message) ProtoMessage() {}

func (x *NestedLevel1Message) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedLevel1Message.ProtoReflect.Descriptor instead.
func (*NestedLevel1Message) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{8}
}

func (x *NestedLevel1Message) GetOrgId3() string {
	if x != nil {
		return x.OrgId3
	}
	return ""
}

func (x *NestedLevel1Message) GetOrgNested() *NestedLevel2Message {
	if x != nil {
		return x.OrgNested
	}
	return nil
}

type MyReqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgNested *NestedLevel1Message `protobuf:"bytes,2,opt,name=org_nested,json=orgNested,proto3" json:"org_nested,omitempty"`
}

func (x *MyReqMessage) Reset() {
	*x = MyReqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyReqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyReqMessage) ProtoMessage() {}

func (x *MyReqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyReqMessage.ProtoReflect.Descriptor instead.
func (*MyReqMessage) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{9}
}

func (x *MyReqMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MyReqMessage) GetOrgNested() *NestedLevel1Message {
	if x != nil {
		return x.OrgNested
	}
	return nil
}

type ScimEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ScimEmail) Reset() {
	*x = ScimEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScimEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScimEmail) ProtoMessage() {}

func (x *ScimEmail) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScimEmail.ProtoReflect.Descriptor instead.
func (*ScimEmail) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{10}
}

func (x *ScimEmail) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ScimUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emails []*ScimEmail `protobuf:"bytes,5,rep,name=emails,proto3" json:"emails,omitempty"`
}

func (x *ScimUser) Reset() {
	*x = ScimUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScimUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScimUser) ProtoMessage() {}

func (x *ScimUser) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScimUser.ProtoReflect.Descriptor instead.
func (*ScimUser) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{11}
}

func (x *ScimUser) GetEmails() []*ScimEmail {
	if x != nil {
		return x.Emails
	}
	return nil
}

type MyMessageWithEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enum  MyMessageWithEnum_MyEnum   `protobuf:"varint,1,opt,name=enum,proto3,enum=valtest.MyMessageWithEnum_MyEnum" json:"enum,omitempty"`
	Enums []MyMessageWithEnum_MyEnum `protobuf:"varint,2,rep,packed,name=enums,proto3,enum=valtest.MyMessageWithEnum_MyEnum" json:"enums,omitempty"`
}

func (x *MyMessageWithEnum) Reset() {
	*x = MyMessageWithEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyMessageWithEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyMessageWithEnum) ProtoMessage() {}

func (x *MyMessageWithEnum) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyMessageWithEnum.ProtoReflect.Descriptor instead.
func (*MyMessageWithEnum) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{12}
}

func (x *MyMessageWithEnum) GetEnum() MyMessageWithEnum_MyEnum {
	if x != nil {
		return x.Enum
	}
	return MyMessageWithEnum_MY_ENUM_UNSPECIFIED
}

func (x *MyMessageWithEnum) GetEnums() []MyMessageWithEnum_MyEnum {
	if x != nil {
		return x.Enums
	}
	return nil
}

type MyMessageWithRepeatedEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enums []MyMessageWithRepeatedEnum_MyEnum `protobuf:"varint,1,rep,packed,name=enums,proto3,enum=valtest.MyMessageWithRepeatedEnum_MyEnum" json:"enums,omitempty"`
}

func (x *MyMessageWithRepeatedEnum) Reset() {
	*x = MyMessageWithRepeatedEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyMessageWithRepeatedEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyMessageWithRepeatedEnum) ProtoMessage() {}

func (x *MyMessageWithRepeatedEnum) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyMessageWithRepeatedEnum.ProtoReflect.Descriptor instead.
func (*MyMessageWithRepeatedEnum) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{13}
}

func (x *MyMessageWithRepeatedEnum) GetEnums() []MyMessageWithRepeatedEnum_MyEnum {
	if x != nil {
		return x.Enums
	}
	return nil
}

// MyMessageWithRepeatedField ...
// gvalidator shouldn't generate empty for loop.
type MyMessageWithRepeatedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyInt []int32 `protobuf:"varint,1,rep,packed,name=my_int,json=myInt,proto3" json:"my_int,omitempty"`
}

func (x *MyMessageWithRepeatedField) Reset() {
	*x = MyMessageWithRepeatedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyMessageWithRepeatedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyMessageWithRepeatedField) ProtoMessage() {}

func (x *MyMessageWithRepeatedField) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyMessageWithRepeatedField.ProtoReflect.Descriptor instead.
func (*MyMessageWithRepeatedField) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{14}
}

func (x *MyMessageWithRepeatedField) GetMyInt() []int32 {
	if x != nil {
		return x.MyInt
	}
	return nil
}

type MyOneOfMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MyField:
	//	*MyOneOfMsg_MyFirstField
	//	*MyOneOfMsg_MySecondField
	//	*MyOneOfMsg_MyThirdField
	MyField isMyOneOfMsg_MyField `protobuf_oneof:"my_field"`
}

func (x *MyOneOfMsg) Reset() {
	*x = MyOneOfMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyOneOfMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyOneOfMsg) ProtoMessage() {}

func (x *MyOneOfMsg) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyOneOfMsg.ProtoReflect.Descriptor instead.
func (*MyOneOfMsg) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{15}
}

func (m *MyOneOfMsg) GetMyField() isMyOneOfMsg_MyField {
	if m != nil {
		return m.MyField
	}
	return nil
}

func (x *MyOneOfMsg) GetMyFirstField() *MyOneOfMsg_FirstType {
	if x, ok := x.GetMyField().(*MyOneOfMsg_MyFirstField); ok {
		return x.MyFirstField
	}
	return nil
}

func (x *MyOneOfMsg) GetMySecondField() *MyOneOfMsg_SecondType {
	if x, ok := x.GetMyField().(*MyOneOfMsg_MySecondField); ok {
		return x.MySecondField
	}
	return nil
}

func (x *MyOneOfMsg) GetMyThirdField() string {
	if x, ok := x.GetMyField().(*MyOneOfMsg_MyThirdField); ok {
		return x.MyThirdField
	}
	return ""
}

type isMyOneOfMsg_MyField interface {
	isMyOneOfMsg_MyField()
}

type MyOneOfMsg_MyFirstField struct {
	MyFirstField *MyOneOfMsg_FirstType `protobuf:"bytes,1,opt,name=my_first_field,json=myFirstField,proto3,oneof"`
}

type MyOneOfMsg_MySecondField struct {
	MySecondField *MyOneOfMsg_SecondType `protobuf:"bytes,2,opt,name=my_second_field,json=mySecondField,proto3,oneof"`
}

type MyOneOfMsg_MyThirdField struct {
	MyThirdField string `protobuf:"bytes,3,opt,name=my_third_field,json=myThirdField,proto3,oneof"`
}

func (*MyOneOfMsg_MyFirstField) isMyOneOfMsg_MyField() {}

func (*MyOneOfMsg_MySecondField) isMyOneOfMsg_MyField() {}

func (*MyOneOfMsg_MyThirdField) isMyOneOfMsg_MyField() {}

type NumberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NanAllowed         float64                     `protobuf:"fixed64,1,opt,name=nan_allowed,json=nanAllowed,proto3" json:"nan_allowed,omitempty"`
	NanDisallowed      float64                     `protobuf:"fixed64,2,opt,name=nan_disallowed,json=nanDisallowed,proto3" json:"nan_disallowed,omitempty"`
	DefaultNan         float64                     `protobuf:"fixed64,3,opt,name=default_nan,json=defaultNan,proto3" json:"default_nan,omitempty"` // no validator
	OptionalNoNanValue float64                     `protobuf:"fixed64,4,opt,name=optional_no_nan_value,json=optionalNoNanValue,proto3" json:"optional_no_nan_value,omitempty"`
	OptionalOnly       float64                     `protobuf:"fixed64,5,opt,name=optional_only,json=optionalOnly,proto3" json:"optional_only,omitempty"`
	RangeBasic         float64                     `protobuf:"fixed64,6,opt,name=range_basic,json=rangeBasic,proto3" json:"range_basic,omitempty"`
	RangeLow           float64                     `protobuf:"fixed64,7,opt,name=range_low,json=rangeLow,proto3" json:"range_low,omitempty"`
	RangeHigh          float64                     `protobuf:"fixed64,8,opt,name=range_high,json=rangeHigh,proto3" json:"range_high,omitempty"`
	RangeNovalues      float64                     `protobuf:"fixed64,9,opt,name=range_novalues,json=rangeNovalues,proto3" json:"range_novalues,omitempty"`
	RangeNotOptional   float64                     `protobuf:"fixed64,10,opt,name=range_not_optional,json=rangeNotOptional,proto3" json:"range_not_optional,omitempty"`
	IntTest            int32                       `protobuf:"varint,11,opt,name=int_test,json=intTest,proto3" json:"int_test,omitempty"`
	Int64Test          int64                       `protobuf:"varint,12,opt,name=int64_test,json=int64Test,proto3" json:"int64_test,omitempty"`
	UintTest           uint32                      `protobuf:"varint,13,opt,name=uint_test,json=uintTest,proto3" json:"uint_test,omitempty"`
	RepeatedInt        []int32                     `protobuf:"varint,14,rep,packed,name=repeated_int,json=repeatedInt,proto3" json:"repeated_int,omitempty"`
	NestedNumber       *NumberMessage_NestedNumber `protobuf:"bytes,15,opt,name=nested_number,json=nestedNumber,proto3" json:"nested_number,omitempty"`
}

func (x *NumberMessage) Reset() {
	*x = NumberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberMessage) ProtoMessage() {}

func (x *NumberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberMessage.ProtoReflect.Descriptor instead.
func (*NumberMessage) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{16}
}

func (x *NumberMessage) GetNanAllowed() float64 {
	if x != nil {
		return x.NanAllowed
	}
	return 0
}

func (x *NumberMessage) GetNanDisallowed() float64 {
	if x != nil {
		return x.NanDisallowed
	}
	return 0
}

func (x *NumberMessage) GetDefaultNan() float64 {
	if x != nil {
		return x.DefaultNan
	}
	return 0
}

func (x *NumberMessage) GetOptionalNoNanValue() float64 {
	if x != nil {
		return x.OptionalNoNanValue
	}
	return 0
}

func (x *NumberMessage) GetOptionalOnly() float64 {
	if x != nil {
		return x.OptionalOnly
	}
	return 0
}

func (x *NumberMessage) GetRangeBasic() float64 {
	if x != nil {
		return x.RangeBasic
	}
	return 0
}

func (x *NumberMessage) GetRangeLow() float64 {
	if x != nil {
		return x.RangeLow
	}
	return 0
}

func (x *NumberMessage) GetRangeHigh() float64 {
	if x != nil {
		return x.RangeHigh
	}
	return 0
}

func (x *NumberMessage) GetRangeNovalues() float64 {
	if x != nil {
		return x.RangeNovalues
	}
	return 0
}

func (x *NumberMessage) GetRangeNotOptional() float64 {
	if x != nil {
		return x.RangeNotOptional
	}
	return 0
}

func (x *NumberMessage) GetIntTest() int32 {
	if x != nil {
		return x.IntTest
	}
	return 0
}

func (x *NumberMessage) GetInt64Test() int64 {
	if x != nil {
		return x.Int64Test
	}
	return 0
}

func (x *NumberMessage) GetUintTest() uint32 {
	if x != nil {
		return x.UintTest
	}
	return 0
}

func (x *NumberMessage) GetRepeatedInt() []int32 {
	if x != nil {
		return x.RepeatedInt
	}
	return nil
}

func (x *NumberMessage) GetNestedNumber() *NumberMessage_NestedNumber {
	if x != nil {
		return x.NestedNumber
	}
	return nil
}

type ValTestMessage_NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val          string   `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	NestedEmail  string   `protobuf:"bytes,54,opt,name=nested_email,json=nestedEmail,proto3" json:"nested_email,omitempty"`
	MemberEmails []string `protobuf:"bytes,55,rep,name=member_emails,json=memberEmails,proto3" json:"member_emails,omitempty"`
}

func (x *ValTestMessage_NestedMessage) Reset() {
	*x = ValTestMessage_NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValTestMessage_NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValTestMessage_NestedMessage) ProtoMessage() {}

func (x *ValTestMessage_NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValTestMessage_NestedMessage.ProtoReflect.Descriptor instead.
func (*ValTestMessage_NestedMessage) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ValTestMessage_NestedMessage) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *ValTestMessage_NestedMessage) GetNestedEmail() string {
	if x != nil {
		return x.NestedEmail
	}
	return ""
}

func (x *ValTestMessage_NestedMessage) GetMemberEmails() []string {
	if x != nil {
		return x.MemberEmails
	}
	return nil
}

type ValTestMessage_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ValTestMessage_Contact) Reset() {
	*x = ValTestMessage_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValTestMessage_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValTestMessage_Contact) ProtoMessage() {}

func (x *ValTestMessage_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValTestMessage_Contact.ProtoReflect.Descriptor instead.
func (*ValTestMessage_Contact) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ValTestMessage_Contact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ValTestMessage_Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ValTestMessage_NestedMessage_InnerNestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerVal string `protobuf:"bytes,1,opt,name=inner_val,json=innerVal,proto3" json:"inner_val,omitempty"`
}

func (x *ValTestMessage_NestedMessage_InnerNestedMessage) Reset() {
	*x = ValTestMessage_NestedMessage_InnerNestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValTestMessage_NestedMessage_InnerNestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValTestMessage_NestedMessage_InnerNestedMessage) ProtoMessage() {}

func (x *ValTestMessage_NestedMessage_InnerNestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValTestMessage_NestedMessage_InnerNestedMessage.ProtoReflect.Descriptor instead.
func (*ValTestMessage_NestedMessage_InnerNestedMessage) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ValTestMessage_NestedMessage_InnerNestedMessage) GetInnerVal() string {
	if x != nil {
		return x.InnerVal
	}
	return ""
}

type MyOneOfMsg_FirstType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MyOneOfMsg_FirstType) Reset() {
	*x = MyOneOfMsg_FirstType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyOneOfMsg_FirstType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyOneOfMsg_FirstType) ProtoMessage() {}

func (x *MyOneOfMsg_FirstType) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyOneOfMsg_FirstType.ProtoReflect.Descriptor instead.
func (*MyOneOfMsg_FirstType) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{15, 0}
}

func (x *MyOneOfMsg_FirstType) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MyOneOfMsg_SecondType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MyOneOfMsg_SecondType) Reset() {
	*x = MyOneOfMsg_SecondType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyOneOfMsg_SecondType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyOneOfMsg_SecondType) ProtoMessage() {}

func (x *MyOneOfMsg_SecondType) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyOneOfMsg_SecondType.ProtoReflect.Descriptor instead.
func (*MyOneOfMsg_SecondType) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{15, 1}
}

func (x *MyOneOfMsg_SecondType) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NumberMessage_NestedNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NumberMessage_NestedNumber) Reset() {
	*x = NumberMessage_NestedNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valtest_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberMessage_NestedNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberMessage_NestedNumber) ProtoMessage() {}

func (x *NumberMessage_NestedNumber) ProtoReflect() protoreflect.Message {
	mi := &file_valtest_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberMessage_NestedNumber.ProtoReflect.Descriptor instead.
func (*NumberMessage_NestedNumber) Descriptor() ([]byte, []int) {
	return file_valtest_proto_rawDescGZIP(), []int{16, 0}
}

func (x *NumberMessage_NestedNumber) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_valtest_proto protoreflect.FileDescriptor

var file_valtest_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x73, 0x31, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x13, 0x0a,
	0x0e, 0x56, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xec, 0x1f,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x04, 0x8a, 0xec, 0x1f, 0x00, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0x8a, 0xec, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xec, 0x1f, 0x02, 0x18, 0x01, 0x52, 0x08, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49,
	0x64, 0x52, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf2, 0xeb, 0x1f, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x09,
	0x6f, 0x70, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xf2, 0xeb, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0xeb, 0x1f, 0x06, 0x1a, 0x04, 0x3a, 0x37,
	0x35, 0x30, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0x82, 0xec, 0x1f, 0x12, 0x1a, 0x02, 0x38, 0x3a, 0x3a, 0x0c, 0x7e, 0x24, 0x5e,
	0x2b, 0x60, 0x7b, 0x7d, 0x3d, 0x7c, 0x3b, 0x3c, 0x3e, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0xeb, 0x1f, 0x06, 0x1a, 0x04, 0x33, 0x3a, 0x35, 0x30, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xeb, 0x1f,
	0x03, 0x1a, 0x01, 0x34, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xeb, 0x1f, 0x07, 0x1a, 0x01, 0x34, 0x20,
	0x01, 0x40, 0x04, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2d, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xfa, 0xeb, 0x1f, 0x02, 0x28, 0x01, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32,
	0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xfa, 0xeb, 0x1f, 0x00,
	0x52, 0x10, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0xeb, 0x1f, 0x06, 0x28, 0x01,
	0x3a, 0x02, 0x7e, 0x23, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xfa, 0xeb, 0x1f, 0x02, 0x40, 0x02,
	0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0xeb, 0x1f, 0x04, 0x40, 0x04, 0x40, 0x05,
	0x52, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2d, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xfa, 0xeb, 0x1f, 0x02, 0x48, 0x01, 0x52,
	0x0d, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3e,
	0x0a, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xfa, 0xeb, 0x1f, 0x02, 0x50, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25,
	0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xfa, 0xeb, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xfa, 0xeb, 0x1f, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x48,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0xfa, 0xeb, 0x1f, 0x25, 0x08, 0x00, 0x10, 0x00, 0x1a, 0x04, 0x36, 0x2d,
	0x32, 0x30, 0x20, 0x00, 0x28, 0x01, 0x30, 0x01, 0x3a, 0x01, 0x3e, 0x40, 0x06, 0x40, 0x02, 0x40,
	0x05, 0x40, 0x01, 0x40, 0x03, 0x40, 0x04, 0x48, 0x00, 0x50, 0x00, 0x58, 0x00, 0x52, 0x09, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xfa, 0xeb, 0x1f, 0x0d, 0x08, 0x01, 0x1a, 0x03,
	0x3a, 0x35, 0x30, 0x28, 0x01, 0x3a, 0x02, 0x27, 0x2d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0xfa, 0xeb, 0x1f, 0x0a, 0x08, 0x01, 0x1a, 0x04, 0x3a, 0x35, 0x30, 0x30, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x63, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x63,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xfa, 0xeb, 0x1f, 0x1b, 0x08, 0x01, 0x1a, 0x05, 0x3a, 0x31, 0x30, 0x30, 0x30,
	0x28, 0x01, 0x30, 0x01, 0x40, 0x06, 0x40, 0x02, 0x40, 0x05, 0x40, 0x01, 0x40, 0x03, 0x40, 0x04,
	0x58, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x12, 0x32, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x73, 0x65,
	0x5f, 0x70, 0x75, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0xeb, 0x1f, 0x04,
	0x08, 0x01, 0x58, 0x00, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x73,
	0x65, 0x50, 0x75, 0x61, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x73, 0x65,
	0x5f, 0x70, 0x75, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0xeb, 0x1f, 0x04,
	0x08, 0x01, 0x58, 0x01, 0x52, 0x0b, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x73, 0x65, 0x50, 0x75,
	0x61, 0x12, 0x34, 0x0a, 0x0f, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xeb, 0x1f, 0x07,
	0x08, 0x01, 0x1a, 0x01, 0x32, 0x58, 0x01, 0x52, 0x0e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x69, 0x73,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x03,
	0x66, 0x61, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x66, 0x61, 0x78,
	0x12, 0x20, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0xeb, 0x1f, 0x04, 0x1a, 0x02, 0x31, 0x31, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x04, 0xc8, 0xeb, 0x1f, 0x01, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x61, 0x6c,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4e, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x70, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x61, 0x6c, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x08, 0xe0, 0xeb, 0x1f, 0x01,
	0xe8, 0xeb, 0x1f, 0x0a, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x06, 0x73, 0x31, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0x8a, 0xec, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x73, 0x31, 0x32, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x31, 0x32, 0x5f, 0x69, 0x64, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x31, 0x32, 0x49, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x31, 0x32, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x8a, 0xec, 0x1f, 0x06, 0x08, 0x01, 0x18, 0x01, 0x20, 0x01, 0x52, 0x05, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x9a, 0xec, 0x1f, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x0c,
	0x75, 0x72, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x9a, 0xec, 0x1f, 0x11, 0x08, 0x01, 0x12, 0x03, 0x66, 0x74, 0x70, 0x12,
	0x04, 0x66, 0x74, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x41, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xa2, 0xec, 0x1f, 0x00, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xa2, 0xec, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0xca, 0x01, 0x0a,
	0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xeb, 0x1f,
	0x07, 0x1a, 0x05, 0x31, 0x3a, 0x31, 0x30, 0x30, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a,
	0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf2, 0xeb, 0x1f, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xf2,
	0xeb, 0x1f, 0x00, 0xe0, 0xeb, 0x1f, 0x02, 0xe8, 0xeb, 0x1f, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x12, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xfa, 0xeb, 0x1f, 0x07, 0x1a, 0x05, 0x31, 0x3a, 0x31, 0x30, 0x30, 0x52,
	0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x74,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc0, 0xeb, 0x1f, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf2, 0xeb, 0x1f, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0f, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x9b,
	0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x80,
	0xeb, 0x1f, 0x01, 0x8a, 0xec, 0x1f, 0x06, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a,
	0xec, 0x1f, 0x04, 0x18, 0x01, 0x20, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xec, 0x1f, 0x06, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x1e,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x69, 0x6e,
	0x67, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48,
	0x0a, 0x0c, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x6d,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xeb, 0x1f, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32,
	0x0a, 0x18, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xec, 0x1f, 0x02, 0x18, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x31, 0x32, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xec, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x13, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x33, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xeb, 0x1f,
	0x03, 0x1a, 0x01, 0x35, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x35, 0x22, 0x74, 0x0a, 0x13,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x34, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xeb, 0x1f, 0x03, 0x1a, 0x01, 0x34, 0x52, 0x06, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x34, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x61, 0x6c, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x22, 0x74, 0x0a, 0x13, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xeb, 0x1f, 0x03,
	0x1a, 0x01, 0x33, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x33, 0x12, 0x3b, 0x0a, 0x0a, 0x6f,
	0x72, 0x67, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6f,
	0x72, 0x67, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x6d, 0x0a, 0x0c, 0x4d, 0x79, 0x52, 0x65,
	0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0xeb, 0x1f, 0x03, 0x1a,
	0x01, 0x32, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x72,
	0x67, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6f, 0x72,
	0x67, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x27, 0x0a, 0x09, 0x53, 0x63, 0x69, 0x6d, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf2, 0xeb, 0x1f, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x36, 0x0a, 0x08, 0x53, 0x63, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x69, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x4d, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3b,
	0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76,
	0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x42,
	0x04, 0x90, 0xec, 0x1f, 0x01, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x3d, 0x0a, 0x05, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x61, 0x6c,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x04, 0x90,
	0xec, 0x1f, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x4d, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x59, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x59, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01,
	0x22, 0x98, 0x01, 0x0a, 0x19, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x45,
	0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x04, 0x90, 0xec, 0x1f, 0x01, 0x52, 0x05,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x59, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x59, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x22, 0x39, 0x0a, 0x1a, 0x4d,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0xe8, 0xeb, 0x1f, 0x05, 0x52,
	0x05, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x0a, 0x4d, 0x79, 0x4f, 0x6e, 0x65,
	0x4f, 0x66, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x0e, 0x6d, 0x79, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x4d,
	0x73, 0x67, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x0f,
	0x6d, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x0e, 0x6d, 0x79, 0x5f, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xb0, 0xeb, 0x1f, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x79, 0x54, 0x68, 0x69, 0x72, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x1a, 0x27, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x04, 0x90, 0xeb, 0x1f, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x28, 0x0a,
	0x0a, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0x90, 0xeb, 0x1f, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x79, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0x97, 0x06, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x06, 0xaa, 0xec, 0x1f, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x6e, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x0e, 0x6e, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x06, 0xaa, 0xec, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x0d,
	0x6e, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6e, 0x12, 0x3b,
	0x0a, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x5f, 0x6e, 0x61,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x08, 0xaa,
	0xec, 0x1f, 0x04, 0x08, 0x01, 0x10, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4e, 0x6f, 0x4e, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x06, 0xaa, 0xec, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0c, 0xaa,
	0xec, 0x1f, 0x08, 0x08, 0x01, 0x1a, 0x04, 0x31, 0x3a, 0x31, 0x30, 0x52, 0x0a, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0xaa, 0xec, 0x1f, 0x06,
	0x08, 0x01, 0x1a, 0x02, 0x31, 0x3a, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77,
	0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0b, 0xaa, 0xec, 0x1f, 0x07, 0x08, 0x01, 0x1a, 0x03, 0x3a, 0x31,
	0x30, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x30, 0x0a, 0x0e,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x09, 0xaa, 0xec, 0x1f, 0x05, 0x08, 0x01, 0x1a, 0x01, 0x3a, 0x52,
	0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0c, 0xaa, 0xec, 0x1f, 0x08,
	0x08, 0x00, 0x1a, 0x04, 0x31, 0x3a, 0x31, 0x30, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xaa, 0xec,
	0x1f, 0x06, 0x1a, 0x04, 0x31, 0x3a, 0x39, 0x39, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0xaa, 0xec, 0x1f, 0x0c, 0x08, 0x01, 0x1a, 0x08, 0x2d,
	0x31, 0x30, 0x30, 0x3a, 0x31, 0x30, 0x30, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xaa, 0xec, 0x1f, 0x08, 0x08, 0x01, 0x1a, 0x04, 0x35,
	0x3a, 0x39, 0x39, 0x52, 0x08, 0x75, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x0d, 0xaa, 0xec, 0x1f, 0x09, 0x08, 0x01, 0x1a, 0x05, 0x31, 0x30, 0x3a,
	0x32, 0x30, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x32, 0x0a, 0x0c, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xaa, 0xec, 0x1f, 0x08, 0x08, 0x01,
	0x1a, 0x04, 0x3a, 0x31, 0x30, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x5a,
	0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x31, 0x32, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_valtest_proto_rawDescOnce sync.Once
	file_valtest_proto_rawDescData = file_valtest_proto_rawDesc
)

func file_valtest_proto_rawDescGZIP() []byte {
	file_valtest_proto_rawDescOnce.Do(func() {
		file_valtest_proto_rawDescData = protoimpl.X.CompressGZIP(file_valtest_proto_rawDescData)
	})
	return file_valtest_proto_rawDescData
}

var file_valtest_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_valtest_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_valtest_proto_goTypes = []interface{}{
	(MyMessageWithEnum_MyEnum)(0),                           // 0: valtest.MyMessageWithEnum.MyEnum
	(MyMessageWithRepeatedEnum_MyEnum)(0),                   // 1: valtest.MyMessageWithRepeatedEnum.MyEnum
	(*ValTestMessage)(nil),                                  // 2: valtest.ValTestMessage
	(*LogOnlyValidationMessage)(nil),                        // 3: valtest.LogOnlyValidationMessage
	(*OuterMessageUsingNestedMessage)(nil),                  // 4: valtest.OuterMessageUsingNestedMessage
	(*InnerMessage)(nil),                                    // 5: valtest.InnerMessage
	(*InnerMessageWithLegacyId)(nil),                        // 6: valtest.InnerMessageWithLegacyId
	(*InnerMessageWithS12Id)(nil),                           // 7: valtest.InnerMessageWithS12Id
	(*NestedLevel3Message)(nil),                             // 8: valtest.NestedLevel3Message
	(*NestedLevel2Message)(nil),                             // 9: valtest.NestedLevel2Message
	(*NestedLevel1Message)(nil),                             // 10: valtest.NestedLevel1Message
	(*MyReqMessage)(nil),                                    // 11: valtest.MyReqMessage
	(*ScimEmail)(nil),                                       // 12: valtest.ScimEmail
	(*ScimUser)(nil),                                        // 13: valtest.ScimUser
	(*MyMessageWithEnum)(nil),                               // 14: valtest.MyMessageWithEnum
	(*MyMessageWithRepeatedEnum)(nil),                       // 15: valtest.MyMessageWithRepeatedEnum
	(*MyMessageWithRepeatedField)(nil),                      // 16: valtest.MyMessageWithRepeatedField
	(*MyOneOfMsg)(nil),                                      // 17: valtest.MyOneOfMsg
	(*NumberMessage)(nil),                                   // 18: valtest.NumberMessage
	(*ValTestMessage_NestedMessage)(nil),                    // 19: valtest.ValTestMessage.NestedMessage
	nil,                                                     // 20: valtest.ValTestMessage.NotSupportedEntry
	(*ValTestMessage_Contact)(nil),                          // 21: valtest.ValTestMessage.Contact
	(*ValTestMessage_NestedMessage_InnerNestedMessage)(nil), // 22: valtest.ValTestMessage.NestedMessage.InnerNestedMessage
	(*MyOneOfMsg_FirstType)(nil),                            // 23: valtest.MyOneOfMsg.FirstType
	(*MyOneOfMsg_SecondType)(nil),                           // 24: valtest.MyOneOfMsg.SecondType
	(*NumberMessage_NestedNumber)(nil),                      // 25: valtest.NumberMessage.NestedNumber
}
var file_valtest_proto_depIdxs = []int32{
	6,  // 0: valtest.ValTestMessage.inner_legacy_id:type_name -> valtest.InnerMessageWithLegacyId
	5,  // 1: valtest.ValTestMessage.msg_required:type_name -> valtest.InnerMessage
	19, // 2: valtest.ValTestMessage.nested_message:type_name -> valtest.ValTestMessage.NestedMessage
	20, // 3: valtest.ValTestMessage.not_supported:type_name -> valtest.ValTestMessage.NotSupportedEntry
	21, // 4: valtest.ValTestMessage.contacts_with_length_constraint:type_name -> valtest.ValTestMessage.Contact
	21, // 5: valtest.ValTestMessage.contacts_without_length_constraint:type_name -> valtest.ValTestMessage.Contact
	7,  // 6: valtest.ValTestMessage.inner_s12_id:type_name -> valtest.InnerMessageWithS12Id
	19, // 7: valtest.OuterMessageUsingNestedMessage.some_message:type_name -> valtest.ValTestMessage.NestedMessage
	8,  // 8: valtest.NestedLevel2Message.org_nested:type_name -> valtest.NestedLevel3Message
	9,  // 9: valtest.NestedLevel1Message.org_nested:type_name -> valtest.NestedLevel2Message
	10, // 10: valtest.MyReqMessage.org_nested:type_name -> valtest.NestedLevel1Message
	12, // 11: valtest.ScimUser.emails:type_name -> valtest.ScimEmail
	0,  // 12: valtest.MyMessageWithEnum.enum:type_name -> valtest.MyMessageWithEnum.MyEnum
	0,  // 13: valtest.MyMessageWithEnum.enums:type_name -> valtest.MyMessageWithEnum.MyEnum
	1,  // 14: valtest.MyMessageWithRepeatedEnum.enums:type_name -> valtest.MyMessageWithRepeatedEnum.MyEnum
	23, // 15: valtest.MyOneOfMsg.my_first_field:type_name -> valtest.MyOneOfMsg.FirstType
	24, // 16: valtest.MyOneOfMsg.my_second_field:type_name -> valtest.MyOneOfMsg.SecondType
	25, // 17: valtest.NumberMessage.nested_number:type_name -> valtest.NumberMessage.NestedNumber
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_valtest_proto_init() }
func file_valtest_proto_init() {
	if File_valtest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_valtest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValTestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogOnlyValidationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OuterMessageUsingNestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerMessageWithLegacyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerMessageWithS12Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedLevel3Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedLevel2Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedLevel1Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyReqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScimEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScimUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyMessageWithEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyMessageWithRepeatedEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyMessageWithRepeatedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyOneOfMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValTestMessage_NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValTestMessage_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValTestMessage_NestedMessage_InnerNestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyOneOfMsg_FirstType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyOneOfMsg_SecondType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valtest_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberMessage_NestedNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_valtest_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ValTestMessage_Fax)(nil),
		(*ValTestMessage_Phone)(nil),
	}
	file_valtest_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*MyOneOfMsg_MyFirstField)(nil),
		(*MyOneOfMsg_MySecondField)(nil),
		(*MyOneOfMsg_MyThirdField)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_valtest_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_valtest_proto_goTypes,
		DependencyIndexes: file_valtest_proto_depIdxs,
		EnumInfos:         file_valtest_proto_enumTypes,
		MessageInfos:      file_valtest_proto_msgTypes,
	}.Build()
	File_valtest_proto = out.File
	file_valtest_proto_rawDesc = nil
	file_valtest_proto_goTypes = nil
	file_valtest_proto_depIdxs = nil
}

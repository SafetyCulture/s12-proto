// Copyright (c) 2021 SafetyCulture Pty Ltd. All Rights Reserved.

syntax = "proto3";
package valtest;

import "s12/protobuf/proto/validator.proto";

option go_package = "github.com/SafetyCulture/s12-proto/protobuf/protoc-gen-govalidator/valtest";

message ValTestMessage {
  // returns an error if the string cannot be parsed as a UUID
  string id = 1 [(validator.id) = {}];
  // we do not support bytes currently for id
  // bytes user_id = 2 [(validator.id) = {}];
  // can validate each repeated item too
  repeated string ids = 3 [(validator.id) = {}];
  // only validate if non-zero value
  string media_id = 4 [(validator.id) = { optional: true }];
  // returns an error if the string cannot be parsed as a legacy id
  string legacy_id = 5 [(validator.id) = { legacy: true }];
  // InnerMessage can contain a legacy id too
  InnerMessageWithLegacyId inner_legacy_id = 6;

  // email validation
  string email = 11 [(validator.email) = {}];
  // optional email address
  string opt_email = 12 [(validator.email) = { optional: true }];
  // email address with domain validation
  //string existing_email = 13 [(validator.email) = { check_domain: true }];

  // validate the max length of a string
  string description = 21 [(validator.string) = { len: ":750" }];
  // validate the min length (max length defaults to current default string len (130))
  string password = 22 [(validator.unsafe_string) = { len: "8:", allow: "~$^+`{}=|;<>" }];
  // validate min and max length
  string title = 23 [(validator.string) = { len: "3:50" }];
  // validate fixed length
  string fixed_string = 24 [(validator.string) = { len: "4" }];
  // validate length in runes instead of bytes
  string rune_string = 25 [(validator.string) = { len: "4", runes: true, symbols: [OTHER] }];
  // replace unsafe chars
  string replace_string = 26 [(validator.string) = { replace_unsafe: true }];
  string not_replace_string = 27 [(validator.string) = { /*replace_unsafe: false* (default shoulud be off)*/ }];
  // allow additional characters including # as part of the restricted chars list (should be replaced by replace_unsafe)
  string allow_string = 28 [(validator.string) = { allow: "~#", replace_unsafe: true }];
  // allow symbol category
  string symbol_string = 29 [(validator.string) = { symbols: [CURRENCY] }];
  // allow multiple symbol categories
  string symbols_string = 30 [(validator.string) = { symbols: [OTHER, MARK] }];
  // allow newlines
  string newline_string = 31 [(validator.string) = { multiline: true }];
  // disable encoding validation
  string invalid_encoding_string = 32 [(validator.string) = { validate_encoding: false }];
  // optional string
  string opt_string = 33 [(validator.string) = { optional: true }];
  // trimmed string
  string trim_string = 34 [(validator.string) = { trim: true }];
  // all options
  string all_string = 35 [(validator.string) = {
    optional: false,
    trim: false,
    len: "6-20",
    runes: false,
    replace_unsafe: true,
    replace_other: true,
    sanitise_pua: false,
    allow: ">",
    symbols: [COMMON,CURRENCY,MARK,PUNCTUATION,MODIFIER,OTHER],
    multiline: false,
    validate_encoding: false
   }];
   // custom tests for names
   string name = 36 [(validator.string) = { replace_unsafe: true, allow: "'-", optional: true, len: ":50" }];
   string sc_title = 37 [(validator.string) = { replace_unsafe: true, optional: true, len: ":500" }];
   // this is an example of a definition that will allow many characters but still will replace unsafe chars
   // normally, definitions like this should be avoided as it is unlikely that it will match your data requirements
   // however, as a starting point, with these settings it is very unlikely that user input is rejected unless it is malformed
   string sc_permissive = 38 [(validator.string) = {
     len: ":1000",
     replace_unsafe: true,
     replace_other: true,
     sanitise_pua: true,
     optional: true,
     symbols: [COMMON,CURRENCY,MARK,PUNCTUATION,MODIFIER,OTHER],
  }];
  string not_sanitise_pua = 39 [(validator.string) = { sanitise_pua: false, optional: true }];
  string sanitise_pua = 40 [(validator.string) = { sanitise_pua: true, optional: true }];
  string sanitise_length = 41 [(validator.string) = { len: "2", sanitise_pua: true, optional: true }];

  // field without any validation
  string no_validation = 50;

  oneof contact_oneof {
    string fax = 51;
    string phone = 52 [(validator.string) = { len: "11" }];
  }

  // Required inner message
  InnerMessage msg_required = 53 [(validator.msg_required) = true];

  message NestedMessage {
    string val = 1 [
      (validator.string) = { len: "1:100" }
    ];

    message InnerNestedMessage {
      string inner_val = 1 [
        (validator.string) = { len: "1:100" }
      ];
    }

   string nested_email = 54 [(validator.email) = {}];

   repeated string member_emails = 55 [
      (validator.email) = {},
      (validator.repeated_len_gte) = 2,
      (validator.repeated_len_lte) = 5
    ];
  }

  NestedMessage nested_message = 56;

  map<string, string> not_supported = 57;

  message Contact {
    string phone = 1 [(validator.optional) = true ];
    string email = 2 [(validator.email) = {}];
  }
  repeated Contact contacts_with_length_constraint = 58 [
    (validator.repeated_len_gte) = 1,
    (validator.repeated_len_lte) = 10
  ];
  repeated Contact contacts_without_length_constraint = 59;

  // returns an error if the string cannot be parsed as a S12 id
  string s12_id = 60 [(validator.id) = { s12id: true }];

  // InnerMessage can contain a legacy id too
  InnerMessageWithS12Id inner_s12_id = 61;

  string all_id = 62 [(validator.id) = { optional: true, legacy: true, s12id: true }];

  string url = 63 [(validator.url) = {}];
  string url_all_opts = 64 [(validator.url) = {
    optional: true,
    schemes: ["ftp", "ftps"],
    allow_fragment: true,
    allow_http: true
  }];

  string timezone = 65 [
    (validator.timezone) = {}
  ];

  string timezone_optional = 66 [
    (validator.timezone) = {
      optional: true
    }
  ];
}

message LogOnlyValidationMessage {
  string image_id = 1 [(validator.uuid) = true, (validator.id) = { legacy: true, s12id: true, log_only: true}];
  string inspection_id = 2 [(validator.id) = { legacy: true, s12id: true}];
  string owner_id = 3 [(validator.id) = { legacy: true, s12id: true, log_only: true}];
  string template_id = 4 [(validator.id) = {s12id_strict: true}];
}

message OuterMessageUsingNestedMessage {
  ValTestMessage.NestedMessage some_message = 1;
}

message InnerMessage {
  string id = 1 [(validator.uuid) = true];
}

message InnerMessageWithLegacyId {
  string id = 1 [(validator.id) = { legacy: true }];
}

message InnerMessageWithS12Id {
  string id = 1 [(validator.id) = { s12id: true }];
}

message NestedLevel3Message {
  string org_id5 = 1 [(validator.string) = { len: "5"}];
}
message NestedLevel2Message {
  string org_id4 = 1 [(validator.string) = { len: "4"}];
  NestedLevel3Message org_nested = 2;
}
message NestedLevel1Message {
  string org_id3 = 1 [(validator.string) = { len: "3"}];
  NestedLevel2Message org_nested = 2;
}
message MyReqMessage {
  string user_id = 1 [(validator.string) = { len: "2"}];
  NestedLevel1Message org_nested = 2;
}

message ScimEmail {
  string value = 3 [ (validator.email) = {} ];
}

message ScimUser {
  repeated ScimEmail emails = 5;
}

// Uncomment to test invalid validator option for Message-type field
// message InvalidMessageValidation {
//   // Validation must be defined in ScimEmail.value field as it can't be applied on the message
//   repeated ScimEmail invalid_val = 1 [(validator.string) = {}];
// }

message MyMessageWithEnum {
  MyEnum enum = 1 [(validator.enum_required) = true];
  repeated MyEnum enums = 2 [(validator.enum_required) = true];

  enum MyEnum {
    // Default is unspecified.
    MY_ENUM_UNSPECIFIED = 0;
    // First valid value.
    MY_ENUM_FIRST = 1;
  }
}

message MyMessageWithRepeatedEnum {
  repeated MyEnum enums = 1 [(validator.enum_required) = true];

  enum MyEnum {
    // Default is unspecified.
    MY_ENUM_UNSPECIFIED = 0;
    // First valid value.
    MY_ENUM_FIRST = 1;
  }
}

// MyMessageWithRepeatedField ...
// gvalidator shouldn't generate empty for loop.
message MyMessageWithRepeatedField {
  repeated int32 my_int = 1 [(validator.repeated_len_lte) = 5];
}

message MyOneOfMsg {
  oneof my_field {
    FirstType my_first_field = 1;
    SecondType my_second_field = 2;
    string my_third_field = 3 [(validator.length_gte) = 1];
  }

  message FirstType {
    int64 value = 1 [(validator.int_gt) = 1];
  }
  message SecondType {
    int64 value = 1 [(validator.int_gt) = 2];
  }
}

message NumberMessage {
  double nan_allowed = 1 [(validator.number) = { allow_nan: true }];
  double nan_disallowed = 2 [(validator.number) = { allow_nan: false }];
  double default_nan = 3; // no validator
  double optional_no_nan_value = 4 [(validator.number) = { allow_nan: false, optional: true }];
  double optional_only = 5 [(validator.number) = { optional: true }];
  double range_basic = 6 [(validator.number) = { optional: true, range: "1:10" }];
  double range_low = 7 [(validator.number) = { optional: true, range: "1:" }];
  double range_high = 8 [(validator.number) = { optional: true, range: ":10" }];
  double range_novalues = 9 [(validator.number) = { optional: true, range: ":" }];
  double range_not_optional = 10 [(validator.number) = { optional: false, range: "1:10" }];
  int32 int_test = 11 [(validator.number) = { range: "1:99" }];
  int64 int64_test = 12 [(validator.number) = { range: "-100:100", optional: true }];
  uint32 uint_test = 13 [(validator.number) = { range: "5:99", optional: true }];
  repeated int32 repeated_int = 14 [(validator.number) = { range: "10:20", optional: true }];
  message NestedNumber {
    int64 value = 1 [(validator.number) = { range: ":100", optional: true }];
  }
  NestedNumber nested_number = 15;
}

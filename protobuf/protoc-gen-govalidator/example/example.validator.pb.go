// Code generated by protoc-gen-govalidator. DO NOT EDIT.

package example

import (
	fmt "fmt"
	proto "github.com/SafetyCulture/s12-proto/s12/protobuf/proto"
	regexp "regexp"
	strings "strings"
)

var _regex_ExampleMessage_Email = regexp.MustCompile(`.+\@.+\..+`)

func (m *ExampleMessage) Validate() error {
	if !proto.IsUUID(m.Id) {
		return fmt.Errorf(`id: value '%v' must be parsable as a UUID`, m.Id)
	}
	if len(m.UserId) != proto.UUIDSize {
		return fmt.Errorf(`user_id: value '%v' must be exactly 16 bytes long to be a valid UUID`, m.UserId)
	}
	if !_regex_ExampleMessage_Email.MatchString(m.Email) {
		return fmt.Errorf(`email: value '%v' must be a string conforming to regex ".+\\@.+\\..+"`, m.Email)
	}
	if !(m.Age > 0) {
		return fmt.Errorf(`age: value '%v' must be greater than '0'`, m.Age)
	}
	if !(m.Speed < 110) {
		return fmt.Errorf(`speed: value '%v' must be less than '110'`, m.Speed)
	}
	if !(m.Score >= 0) {
		return fmt.Errorf(`score: value '%v' must be greater than or equal to '0'`, m.Score)
	}
	if !(m.Score <= 100) {
		return fmt.Errorf(`score: value '%v' must be less than or equal to '100'`, m.Score)
	}
	if m.Inner != nil {
		if v, ok := interface{}(m.Inner).(proto.Validator); ok {
			if err := v.Validate(); err != nil {
				return proto.FieldError("inner", err)
			}
		}
	}
	for _, item := range m.Ids {
		if len(item) != proto.UUIDSize {
			return fmt.Errorf(`ids: value '%v' must be exactly 16 bytes long to be a valid UUID`, item)
		}
	}
	if m.MediaId != "" {
		if !proto.IsUUID(m.MediaId) {
			return fmt.Errorf(`media_id: value '%v' must be parsable as a UUID`, m.MediaId)
		}
	}
	if !(len(m.Description) <= 2000) {
		return fmt.Errorf(`description: value '%v' must have length less than or equal to '2000'`, m.Description)
	}
	if !(len(m.Password) >= 8) {
		return fmt.Errorf(`password: value '%v' must have length greater than or equal to '8'`, m.Password)
	}
	// Validation of oneof fields is unsupported.
	if m.MsgRequired == nil {
		return fmt.Errorf("field msg_required is required")
	}
	if m.MsgRequired != nil {
		if v, ok := interface{}(m.MsgRequired).(proto.Validator); ok {
			if err := v.Validate(); err != nil {
				return proto.FieldError("msg_required", err)
			}
		}
	}
	if !proto.IsLegacyID(m.LegacyId) {
		return fmt.Errorf(`legacy_id: value '%v' must be parsable as a UUID or a legacy ID`, m.LegacyId)
	}
	if m.InnerLegacyId != nil {
		if v, ok := interface{}(m.InnerLegacyId).(proto.Validator); ok {
			if err := v.Validate(); err != nil {
				return proto.FieldError("inner_legacy_id", err)
			}
		}
	}
	_trim_ExampleMessage_Name := strings.TrimSpace(m.Name)
	_ = _trim_ExampleMessage_Name
	if !(len(_trim_ExampleMessage_Name) >= 6) {
		return fmt.Errorf(`name: value '%v' must have length greater than or equal to '6'`, _trim_ExampleMessage_Name)
	}
	if !(len(_trim_ExampleMessage_Name) <= 10) {
		return fmt.Errorf(`name: value '%v' must have length less than or equal to '10'`, _trim_ExampleMessage_Name)
	}
	return nil
}

func (m *InnerMessage) Validate() error {
	if !proto.IsUUID(m.Id) {
		return fmt.Errorf(`id: value '%v' must be parsable as a UUID`, m.Id)
	}
	return nil
}

func (m *InnerMessageWithLegacyId) Validate() error {
	if !proto.IsLegacyID(m.Id) {
		return fmt.Errorf(`id: value '%v' must be parsable as a UUID or a legacy ID`, m.Id)
	}
	return nil
}

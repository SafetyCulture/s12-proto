// Copyright (c) 2018 SafetyCulture Pty Ltd. All Rights Reserved.

syntax = "proto3";
package example;

import "s12/protobuf/proto/validator.proto";

option go_package = "github.com/SafetyCulture/s12-proto/protobuf/protoc-gen-govalidator/example";

message ExampleMessage {
  // returns an error if the string cannot be parsed as a UUID
  string id = 1 [(validator.uuid) = true];
  // bytes can also be parsed as UUID with support for gogo
  bytes user_id = 2 [(validator.uuid) = true];
  // strings can validate against a regular expresion
  string email = 3 [(validator.regex) = ".+\\@.+\\..+"];
  // integers can be greater than a value
  int32 age = 4 [(validator.int_gt) = 0];
  // integers can be less than a value
  int64 speed = 5 [(validator.int_lt) = 110];
  // integers greater/less than or equal, the can also be combined
  int32 score = 6 [(validator.int_gte) = 0, (validator.int_lte) = 100];
  // validation is created for all messages
  InnerMessage inner = 7;
  // can validate each repeated item too
  repeated bytes ids = 8 [(validator.uuid) = true];
  // only validate if non-zero value
  string media_id = 9 [(validator.uuid) = true, (validator.optional) = true];
  // validate the max length of a string
  string description = 10 [(validator.length_lte) = 2000];
  // validate the min length
  string password = 11 [(validator.length_gte) = 8];
  // You don't need to validate everything
  string no_validation = 12;

  oneof contact_oneof {
    string fax = 13;
    string phone = 14 [(validator.length_gte) = 11];
  }

  // Required inner message
  InnerMessage msg_required = 15 [(validator.msg_required) = true];

  // returns an error if the string cannot be parsed as a legacy id
  string legacy_id = 16 [(validator.legacy_id) = true];

  // InnerMessage can contain a legacy id too
  InnerMessageWithLegacyId  inner_legacy_id = 17;

  // Trim leading and trailing whitespaces (as defined by Unicode) before doing length check
  string name = 18 [(validator.length_gte) = 6, (validator.length_lte) = 10, (validator.trim_len_check) = true];

  message NestedMessage {
    string val = 1 [
      (validator.length_gte) = 1,
      (validator.length_lte) = 40,
      (validator.trim_len_check) = true
    ];

    message InnerNestedMessage {
      string inner_val = 1 [
        (validator.length_gte) = 1,
        (validator.length_lte) = 40,
        (validator.trim_len_check) = true
      ];
    }
  }

  NestedMessage nested_message = 19;
}

message OuterMessageUsingNestedMessage {
  ExampleMessage.NestedMessage some_message = 1;
}

message InnerMessage {
  string id = 1 [(validator.uuid) = true];
}

message InnerMessageWithLegacyId {
  string id = 1 [(validator.legacy_id) = true];
}
